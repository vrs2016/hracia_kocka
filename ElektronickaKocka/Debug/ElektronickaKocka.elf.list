
ElektronickaKocka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003118  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  08003894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000074  20000020  080038b4  00020020  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000094  080038b4  00020094  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008c80  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001921  00000000  00000000  00028cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c58  00000000  00000000  0002a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b30  00000000  00000000  0002b248  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004265  00000000  00000000  0002bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000035d3  00000000  00000000  0002ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000335b0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003428  00000000  00000000  00033630  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00036a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	0800323c 	.word	0x0800323c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	0800323c 	.word	0x0800323c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b982 	b.w	80004a8 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	460c      	mov	r4, r1
 80001c4:	4605      	mov	r5, r0
 80001c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14f      	bne.n	800026c <__udivmoddi4+0xb0>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d96b      	bls.n	80002aa <__udivmoddi4+0xee>
 80001d2:	fab2 fe82 	clz	lr, r2
 80001d6:	f1be 0f00 	cmp.w	lr, #0
 80001da:	d00b      	beq.n	80001f4 <__udivmoddi4+0x38>
 80001dc:	f1ce 0520 	rsb	r5, lr, #32
 80001e0:	fa20 f505 	lsr.w	r5, r0, r5
 80001e4:	fa01 f30e 	lsl.w	r3, r1, lr
 80001e8:	ea45 0c03 	orr.w	ip, r5, r3
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	fa00 f50e 	lsl.w	r5, r0, lr
 80001f4:	0c39      	lsrs	r1, r7, #16
 80001f6:	fbbc f0f1 	udiv	r0, ip, r1
 80001fa:	b2ba      	uxth	r2, r7
 80001fc:	fb01 c310 	mls	r3, r1, r0, ip
 8000200:	fb00 f802 	mul.w	r8, r0, r2
 8000204:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000208:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 800020c:	45a0      	cmp	r8, r4
 800020e:	d909      	bls.n	8000224 <__udivmoddi4+0x68>
 8000210:	19e4      	adds	r4, r4, r7
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8128 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800021a:	45a0      	cmp	r8, r4
 800021c:	f240 8125 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000220:	3802      	subs	r0, #2
 8000222:	443c      	add	r4, r7
 8000224:	ebc8 0404 	rsb	r4, r8, r4
 8000228:	fbb4 f3f1 	udiv	r3, r4, r1
 800022c:	fb01 4c13 	mls	ip, r1, r3, r4
 8000230:	fb03 f202 	mul.w	r2, r3, r2
 8000234:	b2ac      	uxth	r4, r5
 8000236:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 800023a:	428a      	cmp	r2, r1
 800023c:	d909      	bls.n	8000252 <__udivmoddi4+0x96>
 800023e:	19c9      	adds	r1, r1, r7
 8000240:	f103 34ff 	add.w	r4, r3, #4294967295
 8000244:	f080 810f 	bcs.w	8000466 <__udivmoddi4+0x2aa>
 8000248:	428a      	cmp	r2, r1
 800024a:	f240 810c 	bls.w	8000466 <__udivmoddi4+0x2aa>
 800024e:	3b02      	subs	r3, #2
 8000250:	4439      	add	r1, r7
 8000252:	1a8a      	subs	r2, r1, r2
 8000254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000258:	2100      	movs	r1, #0
 800025a:	2e00      	cmp	r6, #0
 800025c:	d063      	beq.n	8000326 <__udivmoddi4+0x16a>
 800025e:	fa22 f20e 	lsr.w	r2, r2, lr
 8000262:	2300      	movs	r3, #0
 8000264:	e886 000c 	stmia.w	r6, {r2, r3}
 8000268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026c:	428b      	cmp	r3, r1
 800026e:	d907      	bls.n	8000280 <__udivmoddi4+0xc4>
 8000270:	2e00      	cmp	r6, #0
 8000272:	d056      	beq.n	8000322 <__udivmoddi4+0x166>
 8000274:	2100      	movs	r1, #0
 8000276:	e886 0011 	stmia.w	r6, {r0, r4}
 800027a:	4608      	mov	r0, r1
 800027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000280:	fab3 f183 	clz	r1, r3
 8000284:	2900      	cmp	r1, #0
 8000286:	f040 8093 	bne.w	80003b0 <__udivmoddi4+0x1f4>
 800028a:	42a3      	cmp	r3, r4
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd8>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fe 	bhi.w	8000490 <__udivmoddi4+0x2d4>
 8000294:	1a85      	subs	r5, r0, r2
 8000296:	eb64 0303 	sbc.w	r3, r4, r3
 800029a:	469c      	mov	ip, r3
 800029c:	2001      	movs	r0, #1
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d041      	beq.n	8000326 <__udivmoddi4+0x16a>
 80002a2:	e886 1020 	stmia.w	r6, {r5, ip}
 80002a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002aa:	b912      	cbnz	r2, 80002b2 <__udivmoddi4+0xf6>
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb7 f7f2 	udiv	r7, r7, r2
 80002b2:	fab7 fe87 	clz	lr, r7
 80002b6:	f1be 0f00 	cmp.w	lr, #0
 80002ba:	d136      	bne.n	800032a <__udivmoddi4+0x16e>
 80002bc:	1be4      	subs	r4, r4, r7
 80002be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c2:	fa1f f987 	uxth.w	r9, r7
 80002c6:	2101      	movs	r1, #1
 80002c8:	fbb4 f3f8 	udiv	r3, r4, r8
 80002cc:	fb08 4413 	mls	r4, r8, r3, r4
 80002d0:	fb09 f203 	mul.w	r2, r9, r3
 80002d4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80002d8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80002dc:	42a2      	cmp	r2, r4
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x134>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x132>
 80002e8:	42a2      	cmp	r2, r4
 80002ea:	f200 80d3 	bhi.w	8000494 <__udivmoddi4+0x2d8>
 80002ee:	4603      	mov	r3, r0
 80002f0:	1aa4      	subs	r4, r4, r2
 80002f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002f6:	fb08 4810 	mls	r8, r8, r0, r4
 80002fa:	fb09 f900 	mul.w	r9, r9, r0
 80002fe:	b2ac      	uxth	r4, r5
 8000300:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000304:	4591      	cmp	r9, r2
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x15c>
 8000308:	19d2      	adds	r2, r2, r7
 800030a:	f100 34ff 	add.w	r4, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x15a>
 8000310:	4591      	cmp	r9, r2
 8000312:	f200 80ba 	bhi.w	800048a <__udivmoddi4+0x2ce>
 8000316:	4620      	mov	r0, r4
 8000318:	ebc9 0202 	rsb	r2, r9, r2
 800031c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000320:	e79b      	b.n	800025a <__udivmoddi4+0x9e>
 8000322:	4631      	mov	r1, r6
 8000324:	4630      	mov	r0, r6
 8000326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032a:	fa07 f70e 	lsl.w	r7, r7, lr
 800032e:	f1ce 0c20 	rsb	ip, lr, #32
 8000332:	fa24 f30c 	lsr.w	r3, r4, ip
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	fbb3 faf8 	udiv	sl, r3, r8
 800033e:	fa1f f987 	uxth.w	r9, r7
 8000342:	fb08 351a 	mls	r5, r8, sl, r3
 8000346:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034a:	fa04 f40e 	lsl.w	r4, r4, lr
 800034e:	fb0a fb09 	mul.w	fp, sl, r9
 8000352:	ea4c 0c04 	orr.w	ip, ip, r4
 8000356:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800035a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 800035e:	459b      	cmp	fp, r3
 8000360:	fa00 f50e 	lsl.w	r5, r0, lr
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x1c0>
 8000366:	19db      	adds	r3, r3, r7
 8000368:	f10a 32ff 	add.w	r2, sl, #4294967295
 800036c:	f080 808b 	bcs.w	8000486 <__udivmoddi4+0x2ca>
 8000370:	459b      	cmp	fp, r3
 8000372:	f240 8088 	bls.w	8000486 <__udivmoddi4+0x2ca>
 8000376:	f1aa 0a02 	sub.w	sl, sl, #2
 800037a:	443b      	add	r3, r7
 800037c:	ebcb 0303 	rsb	r3, fp, r3
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	fb00 f409 	mul.w	r4, r0, r9
 800038c:	fa1f fc8c 	uxth.w	ip, ip
 8000390:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000394:	429c      	cmp	r4, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x1ec>
 8000398:	19db      	adds	r3, r3, r7
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	d26e      	bcs.n	800047e <__udivmoddi4+0x2c2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d96c      	bls.n	800047e <__udivmoddi4+0x2c2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1b1c      	subs	r4, r3, r4
 80003aa:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80003ae:	e78b      	b.n	80002c8 <__udivmoddi4+0x10c>
 80003b0:	f1c1 0e20 	rsb	lr, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa24 f70e 	lsr.w	r7, r4, lr
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbb7 faf9 	udiv	sl, r7, r9
 80003ca:	fa1f f38c 	uxth.w	r3, ip
 80003ce:	fb09 771a 	mls	r7, r9, sl, r7
 80003d2:	fa20 f80e 	lsr.w	r8, r0, lr
 80003d6:	408c      	lsls	r4, r1
 80003d8:	fb0a f503 	mul.w	r5, sl, r3
 80003dc:	ea48 0404 	orr.w	r4, r8, r4
 80003e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80003e4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80003e8:	42bd      	cmp	r5, r7
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 fb01 	lsl.w	fp, r0, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f4:	eb17 070c 	adds.w	r7, r7, ip
 80003f8:	f10a 30ff 	add.w	r0, sl, #4294967295
 80003fc:	d241      	bcs.n	8000482 <__udivmoddi4+0x2c6>
 80003fe:	42bd      	cmp	r5, r7
 8000400:	d93f      	bls.n	8000482 <__udivmoddi4+0x2c6>
 8000402:	f1aa 0a02 	sub.w	sl, sl, #2
 8000406:	4467      	add	r7, ip
 8000408:	1b7f      	subs	r7, r7, r5
 800040a:	fbb7 f5f9 	udiv	r5, r7, r9
 800040e:	fb09 7715 	mls	r7, r9, r5, r7
 8000412:	fb05 f303 	mul.w	r3, r5, r3
 8000416:	b2a4      	uxth	r4, r4
 8000418:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800041c:	42bb      	cmp	r3, r7
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb17 070c 	adds.w	r7, r7, ip
 8000424:	f105 30ff 	add.w	r0, r5, #4294967295
 8000428:	d227      	bcs.n	800047a <__udivmoddi4+0x2be>
 800042a:	42bb      	cmp	r3, r7
 800042c:	d925      	bls.n	800047a <__udivmoddi4+0x2be>
 800042e:	3d02      	subs	r5, #2
 8000430:	4467      	add	r7, ip
 8000432:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	1aff      	subs	r7, r7, r3
 800043c:	454f      	cmp	r7, r9
 800043e:	4645      	mov	r5, r8
 8000440:	464c      	mov	r4, r9
 8000442:	d314      	bcc.n	800046e <__udivmoddi4+0x2b2>
 8000444:	d029      	beq.n	800049a <__udivmoddi4+0x2de>
 8000446:	b366      	cbz	r6, 80004a2 <__udivmoddi4+0x2e6>
 8000448:	ebbb 0305 	subs.w	r3, fp, r5
 800044c:	eb67 0704 	sbc.w	r7, r7, r4
 8000450:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000454:	40cb      	lsrs	r3, r1
 8000456:	40cf      	lsrs	r7, r1
 8000458:	ea4e 0303 	orr.w	r3, lr, r3
 800045c:	e886 0088 	stmia.w	r6, {r3, r7}
 8000460:	2100      	movs	r1, #0
 8000462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000466:	4623      	mov	r3, r4
 8000468:	e6f3      	b.n	8000252 <__udivmoddi4+0x96>
 800046a:	4618      	mov	r0, r3
 800046c:	e6da      	b.n	8000224 <__udivmoddi4+0x68>
 800046e:	ebb8 0502 	subs.w	r5, r8, r2
 8000472:	eb69 040c 	sbc.w	r4, r9, ip
 8000476:	3801      	subs	r0, #1
 8000478:	e7e5      	b.n	8000446 <__udivmoddi4+0x28a>
 800047a:	4605      	mov	r5, r0
 800047c:	e7d9      	b.n	8000432 <__udivmoddi4+0x276>
 800047e:	4610      	mov	r0, r2
 8000480:	e792      	b.n	80003a8 <__udivmoddi4+0x1ec>
 8000482:	4682      	mov	sl, r0
 8000484:	e7c0      	b.n	8000408 <__udivmoddi4+0x24c>
 8000486:	4692      	mov	sl, r2
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1c0>
 800048a:	3802      	subs	r0, #2
 800048c:	443a      	add	r2, r7
 800048e:	e743      	b.n	8000318 <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e704      	b.n	800029e <__udivmoddi4+0xe2>
 8000494:	3b02      	subs	r3, #2
 8000496:	443c      	add	r4, r7
 8000498:	e72a      	b.n	80002f0 <__udivmoddi4+0x134>
 800049a:	45c3      	cmp	fp, r8
 800049c:	d3e7      	bcc.n	800046e <__udivmoddi4+0x2b2>
 800049e:	463c      	mov	r4, r7
 80004a0:	e7d1      	b.n	8000446 <__udivmoddi4+0x28a>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080004a8 <__aeabi_idiv0>:
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop

080004ac <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	2300      	movs	r3, #0
 80004ba:	73bb      	strb	r3, [r7, #14]
 80004bc:	230f      	movs	r3, #15
 80004be:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	78db      	ldrb	r3, [r3, #3]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d038      	beq.n	800053a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <NVIC_Init+0xb8>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	43db      	mvns	r3, r3
 80004ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004d2:	0a1b      	lsrs	r3, r3, #8
 80004d4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	f1c3 0304 	rsb	r3, r3, #4
 80004dc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80004de:	7b7a      	ldrb	r2, [r7, #13]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	fa42 f303 	asr.w	r3, r2, r3
 80004e6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	461a      	mov	r2, r3
 80004ee:	7bbb      	ldrb	r3, [r7, #14]
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	789a      	ldrb	r2, [r3, #2]
 80004fa:	7b7b      	ldrb	r3, [r7, #13]
 80004fc:	4013      	ands	r3, r2
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	4313      	orrs	r3, r2
 8000504:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800050c:	4a16      	ldr	r2, [pc, #88]	; (8000568 <NVIC_Init+0xbc>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	7bfa      	ldrb	r2, [r7, #15]
 8000516:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <NVIC_Init+0xbc>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	095b      	lsrs	r3, r3, #5
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	f003 031f 	and.w	r3, r3, #31
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000534:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000538:	e00f      	b.n	800055a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800053a:	490b      	ldr	r1, [pc, #44]	; (8000568 <NVIC_Init+0xbc>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	095b      	lsrs	r3, r3, #5
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f003 031f 	and.w	r3, r3, #31
 800054e:	2201      	movs	r2, #1
 8000550:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000552:	f100 0320 	add.w	r3, r0, #32
 8000556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00
 8000568:	e000e100 	.word	0xe000e100

0800056c <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <ADC_DeInit+0x2c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d109      	bne.n	8000590 <ADC_DeInit+0x24>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 800057c:	2101      	movs	r1, #1
 800057e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000582:	f001 f82b 	bl	80015dc <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8000586:	2100      	movs	r1, #0
 8000588:	f44f 7000 	mov.w	r0, #512	; 0x200
 800058c:	f001 f826 	bl	80015dc <RCC_APB2PeriphResetCmd>
  }
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40012400 	.word	0x40012400

0800059c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80005ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005be:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	021a      	lsls	r2, r3, #8
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <ADC_Init+0xa4>)
 80005e2:	4013      	ands	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	691a      	ldr	r2, [r3, #16]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005f4:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005fc:	4313      	orrs	r3, r2
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	4313      	orrs	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 8000616:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	7d1b      	ldrb	r3, [r3, #20]
 800061c:	3b01      	subs	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	7afb      	ldrb	r3, [r7, #11]
 8000622:	4313      	orrs	r3, r2
 8000624:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000626:	7afb      	ldrb	r3, [r7, #11]
 8000628:	051b      	lsls	r3, r3, #20
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4313      	orrs	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	c0fff7fd 	.word	0xc0fff7fd

08000644 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	f043 0201 	orr.w	r2, r3, #1
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000662:	e005      	b.n	8000670 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f023 0201 	bic.w	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	609a      	str	r2, [r3, #8]
  }
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vref int channels.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d006      	beq.n	800069a <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800068c:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <ADC_TempSensorVrefintCmd+0x34>)
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <ADC_TempSensorVrefintCmd+0x34>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000696:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 8000698:	e005      	b.n	80006a6 <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <ADC_TempSensorVrefintCmd+0x34>)
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ADC_TempSensorVrefintCmd+0x34>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80006a4:	6053      	str	r3, [r2, #4]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40012700 	.word	0x40012700

080006b4 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	4608      	mov	r0, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	461a      	mov	r2, r3
 80006c2:	4603      	mov	r3, r0
 80006c4:	70fb      	strb	r3, [r7, #3]
 80006c6:	460b      	mov	r3, r1
 80006c8:	70bb      	strb	r3, [r7, #2]
 80006ca:	4613      	mov	r3, r2
 80006cc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b1d      	cmp	r3, #29
 80006da:	d923      	bls.n	8000724 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006e0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	f1a3 021e 	sub.w	r2, r3, #30
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	2207      	movs	r2, #7
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	43db      	mvns	r3, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8000700:	7879      	ldrb	r1, [r7, #1]
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	f1a3 021e 	sub.w	r2, r3, #30
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4313      	orrs	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	65da      	str	r2, [r3, #92]	; 0x5c
 8000722:	e06c      	b.n	80007fe <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b13      	cmp	r3, #19
 8000728:	d923      	bls.n	8000772 <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	f1a3 0214 	sub.w	r2, r3, #20
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	2207      	movs	r2, #7
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	43db      	mvns	r3, r3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4013      	ands	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800074e:	7879      	ldrb	r1, [r7, #1]
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	f1a3 0214 	sub.w	r2, r3, #20
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	e045      	b.n	80007fe <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	2b09      	cmp	r3, #9
 8000776:	d923      	bls.n	80007c0 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	f1a3 020a 	sub.w	r2, r3, #10
 8000784:	4613      	mov	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4413      	add	r3, r2
 800078a:	2207      	movs	r2, #7
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	43db      	mvns	r3, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800079c:	7879      	ldrb	r1, [r7, #1]
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	f1a3 020a 	sub.w	r2, r3, #10
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	611a      	str	r2, [r3, #16]
 80007be:	e01e      	b.n	80007fe <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 80007c6:	78fa      	ldrb	r2, [r7, #3]
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	2207      	movs	r2, #7
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	43db      	mvns	r3, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80007e0:	7879      	ldrb	r1, [r7, #1]
 80007e2:	78fa      	ldrb	r2, [r7, #3]
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80007fe:	78bb      	ldrb	r3, [r7, #2]
 8000800:	2b06      	cmp	r3, #6
 8000802:	d821      	bhi.n	8000848 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 800080a:	78bb      	ldrb	r3, [r7, #2]
 800080c:	1e5a      	subs	r2, r3, #1
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	221f      	movs	r2, #31
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	43db      	mvns	r3, r3
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4013      	ands	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000826:	78f9      	ldrb	r1, [r7, #3]
 8000828:	78bb      	ldrb	r3, [r7, #2]
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4313      	orrs	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000846:	e095      	b.n	8000974 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000848:	78bb      	ldrb	r3, [r7, #2]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d821      	bhi.n	8000892 <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000852:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000854:	78bb      	ldrb	r3, [r7, #2]
 8000856:	1fda      	subs	r2, r3, #7
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	221f      	movs	r2, #31
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	43db      	mvns	r3, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000870:	78f9      	ldrb	r1, [r7, #3]
 8000872:	78bb      	ldrb	r3, [r7, #2]
 8000874:	1fda      	subs	r2, r3, #7
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000890:	e070      	b.n	8000974 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 8000892:	78bb      	ldrb	r3, [r7, #2]
 8000894:	2b12      	cmp	r3, #18
 8000896:	d823      	bhi.n	80008e0 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800089e:	78bb      	ldrb	r3, [r7, #2]
 80008a0:	f1a3 020d 	sub.w	r2, r3, #13
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	221f      	movs	r2, #31
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80008bc:	78f9      	ldrb	r1, [r7, #3]
 80008be:	78bb      	ldrb	r3, [r7, #2]
 80008c0:	f1a3 020d 	sub.w	r2, r3, #13
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80008de:	e049      	b.n	8000974 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80008e0:	78bb      	ldrb	r3, [r7, #2]
 80008e2:	2b18      	cmp	r3, #24
 80008e4:	d823      	bhi.n	800092e <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ea:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80008ec:	78bb      	ldrb	r3, [r7, #2]
 80008ee:	f1a3 0213 	sub.w	r2, r3, #19
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	221f      	movs	r2, #31
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	43db      	mvns	r3, r3
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 800090a:	78f9      	ldrb	r1, [r7, #3]
 800090c:	78bb      	ldrb	r3, [r7, #2]
 800090e:	f1a3 0213 	sub.w	r2, r3, #19
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800092c:	e022      	b.n	8000974 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000934:	78bb      	ldrb	r3, [r7, #2]
 8000936:	f1a3 0219 	sub.w	r2, r3, #25
 800093a:	4613      	mov	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	221f      	movs	r2, #31
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	43db      	mvns	r3, r3
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4013      	ands	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8000952:	78f9      	ldrb	r1, [r7, #3]
 8000954:	78bb      	ldrb	r3, [r7, #2]
 8000956:	f1a3 0219 	sub.w	r2, r3, #25
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	609a      	str	r2, [r3, #8]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	b29b      	uxth	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e001      	b.n	80009de <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <ADC_ClearFlag>:
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *     @arg ADC_FLAG_OVR: overrun flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	43da      	mvns	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC.
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <CRC_CalcCRC+0x1c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  
  return (CRC->DR);
 8000a1a:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <CRC_CalcCRC+0x1c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40023000 	.word	0x40023000

08000a2c <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and x can be 
  *         1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a43      	ldr	r2, [pc, #268]	; (8000b6c <DMA_DeInit+0x140>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000a62:	4a43      	ldr	r2, [pc, #268]	; (8000b70 <DMA_DeInit+0x144>)
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <DMA_DeInit+0x144>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f043 030f 	orr.w	r3, r3, #15
 8000a6c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a6e:	e077      	b.n	8000b60 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a40      	ldr	r2, [pc, #256]	; (8000b74 <DMA_DeInit+0x148>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000a78:	4a3d      	ldr	r2, [pc, #244]	; (8000b70 <DMA_DeInit+0x144>)
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <DMA_DeInit+0x144>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000a82:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a84:	e06c      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <DMA_DeInit+0x14c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8000a8e:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <DMA_DeInit+0x144>)
 8000a90:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <DMA_DeInit+0x144>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000a98:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000a9a:	e061      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a37      	ldr	r2, [pc, #220]	; (8000b7c <DMA_DeInit+0x150>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d106      	bne.n	8000ab2 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000aa4:	4a32      	ldr	r2, [pc, #200]	; (8000b70 <DMA_DeInit+0x144>)
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <DMA_DeInit+0x144>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000aae:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000ab0:	e056      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <DMA_DeInit+0x154>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000aba:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <DMA_DeInit+0x144>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <DMA_DeInit+0x144>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000ac4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000ac6:	e04b      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <DMA_DeInit+0x158>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d106      	bne.n	8000ade <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000ad0:	4a27      	ldr	r2, [pc, #156]	; (8000b70 <DMA_DeInit+0x144>)
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <DMA_DeInit+0x144>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ada:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000adc:	e040      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <DMA_DeInit+0x15c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000ae6:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <DMA_DeInit+0x144>)
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <DMA_DeInit+0x144>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000af0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000af2:	e035      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <DMA_DeInit+0x160>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d106      	bne.n	8000b0a <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <DMA_DeInit+0x164>)
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <DMA_DeInit+0x164>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f043 030f 	orr.w	r3, r3, #15
 8000b06:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b08:	e02a      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <DMA_DeInit+0x168>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d106      	bne.n	8000b20 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <DMA_DeInit+0x164>)
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <DMA_DeInit+0x164>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b1c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b1e:	e01f      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <DMA_DeInit+0x16c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d106      	bne.n	8000b36 <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <DMA_DeInit+0x164>)
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <DMA_DeInit+0x164>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000b32:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b34:	e014      	b.n	8000b60 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <DMA_DeInit+0x170>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d106      	bne.n	8000b4c <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <DMA_DeInit+0x164>)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <DMA_DeInit+0x164>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b48:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000b4a:	e009      	b.n	8000b60 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <DMA_DeInit+0x174>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d105      	bne.n	8000b60 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <DMA_DeInit+0x164>)
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <DMA_DeInit+0x164>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000b5e:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40026008 	.word	0x40026008
 8000b70:	40026000 	.word	0x40026000
 8000b74:	4002601c 	.word	0x4002601c
 8000b78:	40026030 	.word	0x40026030
 8000b7c:	40026044 	.word	0x40026044
 8000b80:	40026058 	.word	0x40026058
 8000b84:	4002606c 	.word	0x4002606c
 8000b88:	40026080 	.word	0x40026080
 8000b8c:	40026408 	.word	0x40026408
 8000b90:	40026400 	.word	0x40026400
 8000b94:	4002641c 	.word	0x4002641c
 8000b98:	40026430 	.word	0x40026430
 8000b9c:	40026444 	.word	0x40026444
 8000ba0:	40026458 	.word	0x40026458

08000ba4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bc2:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000bd2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000bde:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000bea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60da      	str	r2, [r3, #12]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000c3e:	e006      	b.n	8000c4e <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000c48:	4013      	ands	r3, r2
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000c64:	887a      	ldrh	r2, [r7, #2]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	605a      	str	r2, [r3, #4]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000c94:	e006      	b.n	8000ca4 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	601a      	str	r2, [r3, #0]
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d103      	bne.n	8000cd2 <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <DMA_GetFlagStatus+0x48>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	e002      	b.n	8000cd8 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <DMA_GetFlagStatus+0x4c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40026000 	.word	0x40026000
 8000cfc:	40026400 	.word	0x40026400

08000d00 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).  
  *      
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d103      	bne.n	8000d1a <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <DMA_ClearFlag+0x2c>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
  }  
}
 8000d18:	e002      	b.n	8000d20 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <DMA_ClearFlag+0x30>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6053      	str	r3, [r2, #4]
  }  
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40026000 	.word	0x40026000
 8000d30:	40026400 	.word	0x40026400

08000d34 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e07e      	b.n	8000e4e <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000d50:	2201      	movs	r2, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d16d      	bne.n	8000e48 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2103      	movs	r1, #3
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d003      	beq.n	8000daa <GPIO_Init+0x76>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	791b      	ldrb	r3, [r3, #4]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d136      	bne.n	8000e18 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2103      	movs	r1, #3
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	401a      	ands	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	795b      	ldrb	r3, [r3, #5]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	889b      	ldrh	r3, [r3, #4]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4013      	ands	r3, r2
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	799b      	ldrb	r3, [r3, #6]
 8000e02:	4619      	mov	r1, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2103      	movs	r1, #3
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	79db      	ldrb	r3, [r3, #7]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	f67f af7d 	bls.w	8000d50 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000e56:	bf00      	nop
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e78:	787a      	ldrb	r2, [r7, #1]
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	08db      	lsrs	r3, r3, #3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	ea02 0103 	and.w	r1, r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f100 0208 	add.w	r2, r0, #8
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <I2C_DeInit+0x44>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d10a      	bne.n	8000f16 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000f00:	2101      	movs	r1, #1
 8000f02:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f06:	f000 fb87 	bl	8001618 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f10:	f000 fb82 	bl	8001618 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8000f14:	e009      	b.n	8000f2a <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000f16:	2101      	movs	r1, #1
 8000f18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f1c:	f000 fb7c 	bl	8001618 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000f20:	2100      	movs	r1, #0
 8000f22:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f26:	f000 fb77 	bl	8001618 <RCC_APB1PeriphResetCmd>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40005400 	.word	0x40005400

08000f38 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f46:	2300      	movs	r3, #0
 8000f48:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <I2C_Init+0x174>)
 8000f50:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	889b      	ldrh	r3, [r3, #4]
 8000f56:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000f58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fa05 	bl	8001374 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <I2C_Init+0x178>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9b      	lsrs	r3, r3, #18
 8000f78:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000f7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f86:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a44      	ldr	r2, [pc, #272]	; (80010b4 <I2C_Init+0x17c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d815      	bhi.n	8000fd2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000fb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d801      	bhi.n	8000fbe <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000fba:	2304      	movs	r3, #4
 8000fbc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000fbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000fc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	841a      	strh	r2, [r3, #32]
 8000fd0:	e040      	b.n	8001054 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	88db      	ldrh	r3, [r3, #6]
 8000fd6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d109      	bne.n	8000ff2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ff0:	e00e      	b.n	8001010 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001008:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800100a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800101a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001022:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001026:	4313      	orrs	r3, r2
 8001028:	b29b      	uxth	r3, r3
 800102a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800102e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001032:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <I2C_Init+0x180>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	1192      	asrs	r2, r2, #6
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001058:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	b29a      	uxth	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001072:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001076:	f023 0302 	bic.w	r3, r3, #2
 800107a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	889a      	ldrh	r2, [r3, #4]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	895b      	ldrh	r3, [r3, #10]
 8001084:	4313      	orrs	r3, r2
 8001086:	b29a      	uxth	r2, r3
 8001088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800108a:	4313      	orrs	r3, r2
 800108c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001092:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	899a      	ldrh	r2, [r3, #12]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	891b      	ldrh	r3, [r3, #8]
 800109c:	4313      	orrs	r3, r2
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	811a      	strh	r2, [r3, #8]
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	007a1200 	.word	0x007a1200
 80010b0:	431bde83 	.word	0x431bde83
 80010b4:	000186a0 	.word	0x000186a0
 80010b8:	10624dd3 	.word	0x10624dd3

080010bc <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80010de:	e007      	b.n	80010f0 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f023 0301 	bic.w	r3, r3, #1
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	801a      	strh	r2, [r3, #0]
  }
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d008      	beq.n	8001120 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	b29a      	uxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800111e:	e007      	b.n	8001130 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	801a      	strh	r2, [r3, #0]
  }
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d008      	beq.n	8001160 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800115e:	e007      	b.n	8001170 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	801a      	strh	r2, [r3, #0]
  }
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
 8001188:	4613      	mov	r3, r2
 800118a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	70fb      	strb	r3, [r7, #3]
 800119a:	e003      	b.n	80011a4 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	821a      	strh	r2, [r3, #16]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted.
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	821a      	strh	r2, [r3, #16]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 80011fa:	e007      	b.n	800120c <I2C_DMACmd+0x34>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	889b      	ldrh	r3, [r3, #4]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	809a      	strh	r2, [r3, #4]
  }
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d008      	beq.n	800123c <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	b29b      	uxth	r3, r3
 8001230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001234:	b29a      	uxth	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 800123a:	e007      	b.n	800124c <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	b29b      	uxth	r3, r3
 8001242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	809a      	strh	r2, [r3, #4]
  }
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	8a9b      	ldrh	r3, [r3, #20]
 8001276:	b29b      	uxth	r3, r3
 8001278:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	8b1b      	ldrh	r3, [r3, #24]
 800127e:	b29b      	uxth	r3, r3
 8001280:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4313      	orrs	r3, r2
 800128e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001292:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	401a      	ands	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d102      	bne.n	80012a6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
 80012a4:	e001      	b.n	80012aa <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	0f1b      	lsrs	r3, r3, #28
 80012d6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012de:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3314      	adds	r3, #20
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e005      	b.n	80012fa <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3318      	adds	r3, #24
 80012f8:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
 800130a:	e001      	b.n	8001310 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001310:	7dfb      	ldrb	r3, [r7, #23]
}
 8001312:	4618      	mov	r0, r3
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <RCC_HSICmd+0x1c>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	42470000 	.word	0x42470000

0800133c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <RCC_SYSCLKConfig+0x34>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f023 0303 	bic.w	r3, r3, #3
 8001354:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <RCC_SYSCLKConfig+0x34>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6093      	str	r3, [r2, #8]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001394:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d865      	bhi.n	8001470 <RCC_GetClocksFreq+0xfc>
 80013a4:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <RCC_GetClocksFreq+0x38>)
 80013a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013aa:	bf00      	nop
 80013ac:	080013e1 	.word	0x080013e1
 80013b0:	08001471 	.word	0x08001471
 80013b4:	08001471 	.word	0x08001471
 80013b8:	08001471 	.word	0x08001471
 80013bc:	08001401 	.word	0x08001401
 80013c0:	08001471 	.word	0x08001471
 80013c4:	08001471 	.word	0x08001471
 80013c8:	08001471 	.word	0x08001471
 80013cc:	08001409 	.word	0x08001409
 80013d0:	08001471 	.word	0x08001471
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001471 	.word	0x08001471
 80013dc:	08001411 	.word	0x08001411
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80013e0:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013e8:	0b5b      	lsrs	r3, r3, #13
 80013ea:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	3301      	adds	r3, #1
 80013f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
      break;
 80013fe:	e047      	b.n	8001490 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a45      	ldr	r2, [pc, #276]	; (8001518 <RCC_GetClocksFreq+0x1a4>)
 8001404:	601a      	str	r2, [r3, #0]
      break;
 8001406:	e043      	b.n	8001490 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a44      	ldr	r2, [pc, #272]	; (800151c <RCC_GetClocksFreq+0x1a8>)
 800140c:	601a      	str	r2, [r3, #0]
      break;
 800140e:	e03f      	b.n	8001490 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001418:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001422:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	4a3d      	ldr	r2, [pc, #244]	; (8001520 <RCC_GetClocksFreq+0x1ac>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	0d9b      	lsrs	r3, r3, #22
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d109      	bne.n	800145c <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <RCC_GetClocksFreq+0x1a4>)
 800144c:	fb02 f203 	mul.w	r2, r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fbb2 f2f3 	udiv	r2, r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800145a:	e019      	b.n	8001490 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	4a2f      	ldr	r2, [pc, #188]	; (800151c <RCC_GetClocksFreq+0x1a8>)
 8001460:	fb02 f203 	mul.w	r2, r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fbb2 f2f3 	udiv	r2, r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
      }
      break;
 800146e:	e00f      	b.n	8001490 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001478:	0b5b      	lsrs	r3, r3, #13
 800147a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	461a      	mov	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
      break;
 800148e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001498:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80014a0:	4a20      	ldr	r2, [pc, #128]	; (8001524 <RCC_GetClocksFreq+0x1b0>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	40da      	lsrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014c0:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80014c8:	4a16      	ldr	r2, [pc, #88]	; (8001524 <RCC_GetClocksFreq+0x1b0>)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	40da      	lsrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <RCC_GetClocksFreq+0x1a0>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80014e8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	0adb      	lsrs	r3, r3, #11
 80014ee:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <RCC_GetClocksFreq+0x1b0>)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	40da      	lsrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
}
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	; 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	00f42400 	.word	0x00f42400
 800151c:	007a1200 	.word	0x007a1200
 8001520:	20000000 	.word	0x20000000
 8001524:	2000000c 	.word	0x2000000c

08001528 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800153a:	4909      	ldr	r1, [pc, #36]	; (8001560 <RCC_AHBPeriphClockCmd+0x38>)
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <RCC_AHBPeriphClockCmd+0x38>)
 800153e:	69da      	ldr	r2, [r3, #28]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001546:	e006      	b.n	8001556 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001548:	4905      	ldr	r1, [pc, #20]	; (8001560 <RCC_AHBPeriphClockCmd+0x38>)
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <RCC_AHBPeriphClockCmd+0x38>)
 800154c:	69da      	ldr	r2, [r3, #28]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	43db      	mvns	r3, r3
 8001552:	4013      	ands	r3, r2
 8001554:	61cb      	str	r3, [r1, #28]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40023800 	.word	0x40023800

08001564 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001576:	4909      	ldr	r1, [pc, #36]	; (800159c <RCC_APB2PeriphClockCmd+0x38>)
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <RCC_APB2PeriphClockCmd+0x38>)
 800157a:	6a1a      	ldr	r2, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4313      	orrs	r3, r2
 8001580:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001582:	e006      	b.n	8001592 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001584:	4905      	ldr	r1, [pc, #20]	; (800159c <RCC_APB2PeriphClockCmd+0x38>)
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <RCC_APB2PeriphClockCmd+0x38>)
 8001588:	6a1a      	ldr	r2, [r3, #32]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	43db      	mvns	r3, r3
 800158e:	4013      	ands	r3, r2
 8001590:	620b      	str	r3, [r1, #32]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40023800 	.word	0x40023800

080015a0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80015b2:	4909      	ldr	r1, [pc, #36]	; (80015d8 <RCC_APB1PeriphClockCmd+0x38>)
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <RCC_APB1PeriphClockCmd+0x38>)
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80015be:	e006      	b.n	80015ce <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80015c0:	4905      	ldr	r1, [pc, #20]	; (80015d8 <RCC_APB1PeriphClockCmd+0x38>)
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <RCC_APB1PeriphClockCmd+0x38>)
 80015c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4013      	ands	r3, r2
 80015cc:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40023800 	.word	0x40023800

080015dc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80015ee:	4909      	ldr	r1, [pc, #36]	; (8001614 <RCC_APB2PeriphResetCmd+0x38>)
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <RCC_APB2PeriphResetCmd+0x38>)
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80015fa:	e006      	b.n	800160a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80015fc:	4905      	ldr	r1, [pc, #20]	; (8001614 <RCC_APB2PeriphResetCmd+0x38>)
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <RCC_APB2PeriphResetCmd+0x38>)
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	43db      	mvns	r3, r3
 8001606:	4013      	ands	r3, r2
 8001608:	614b      	str	r3, [r1, #20]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40023800 	.word	0x40023800

08001618 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800162a:	4909      	ldr	r1, [pc, #36]	; (8001650 <RCC_APB1PeriphResetCmd+0x38>)
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <RCC_APB1PeriphResetCmd+0x38>)
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001636:	e006      	b.n	8001646 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001638:	4905      	ldr	r1, [pc, #20]	; (8001650 <RCC_APB1PeriphResetCmd+0x38>)
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <RCC_APB1PeriphResetCmd+0x38>)
 800163c:	699a      	ldr	r2, [r3, #24]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	43db      	mvns	r3, r3
 8001642:	4013      	ands	r3, r2
 8001644:	618b      	str	r3, [r1, #24]
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800

08001654 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	b2db      	uxtb	r3, r3
 8001670:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d103      	bne.n	8001680 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <RCC_GetFlagStatus+0x60>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e002      	b.n	8001686 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <RCC_GetFlagStatus+0x60>)
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	74fb      	strb	r3, [r7, #19]
 80016a2:	e001      	b.n	80016a8 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80016a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40023800 	.word	0x40023800

080016b8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80016d2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	885b      	ldrh	r3, [r3, #2]
 80016dc:	4313      	orrs	r3, r2
 80016de:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001704:	4313      	orrs	r3, r2
 8001706:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800170c:	4313      	orrs	r3, r2
 800170e:	b29a      	uxth	r2, r3
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	4313      	orrs	r3, r2
 8001714:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	89fa      	ldrh	r2, [r7, #14]
 800171a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	8b9b      	ldrh	r3, [r3, #28]
 8001720:	b29b      	uxth	r3, r3
 8001722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	8a1a      	ldrh	r2, [r3, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	821a      	strh	r2, [r3, #16]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8001762:	e007      	b.n	8001774 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800176e:	b29a      	uxth	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	801a      	strh	r2, [r3, #0]
  }
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop

08001780 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	891b      	ldrh	r3, [r3, #8]
 8001794:	b29a      	uxth	r2, r3
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	4013      	ands	r3, r2
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	81bb      	strh	r3, [r7, #12]
 80017cc:	2300      	movs	r3, #0
 80017ce:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8a1b      	ldrh	r3, [r3, #16]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	4013      	ands	r3, r2
 80017da:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	899b      	ldrh	r3, [r3, #12]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	4013      	ands	r3, r2
 80017e6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80017e8:	89bb      	ldrh	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <TIM_GetITStatus+0x42>
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e001      	b.n	80017fe <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	43db      	mvns	r3, r3
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	821a      	strh	r2, [r3, #16]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <I2C1_initDMA>:

int32_t I2C_Rx_Buffer[10];
uint8_t deviceAddrUseI2c = 0;
uint8_t readReg = 0;

void I2C1_initDMA(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8001832:	2101      	movs	r1, #1
 8001834:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001838:	f7ff fe76 	bl	8001528 <RCC_AHBPeriphClockCmd>
	DMA_DeInit(DMA1_Channel7);
 800183c:	481c      	ldr	r0, [pc, #112]	; (80018b0 <I2C1_initDMA+0x84>)
 800183e:	f7ff f8f5 	bl	8000a2c <DMA_DeInit>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) 0x40005410;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <I2C1_initDMA+0x88>)
 8001844:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) I2C_Rx_Buffer;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <I2C1_initDMA+0x8c>)
 8001848:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_BufferSize = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
	DMA_Init(DMA1_Channel7, &DMA_InitStructure);
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <I2C1_initDMA+0x84>)
 8001876:	f7ff f995 	bl	8000ba4 <DMA_Init>
	DMA_ITConfig(DMA1_Channel7, DMA_IT_TC, ENABLE);
 800187a:	2201      	movs	r2, #1
 800187c:	2102      	movs	r1, #2
 800187e:	480c      	ldr	r0, [pc, #48]	; (80018b0 <I2C1_initDMA+0x84>)
 8001880:	f7ff f9f8 	bl	8000c74 <DMA_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;
 8001884:	2311      	movs	r3, #17
 8001886:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8001890:	2302      	movs	r3, #2
 8001892:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&NVIC_InitStructure);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe03 	bl	80004ac <NVIC_Init>
}
 80018a6:	bf00      	nop
 80018a8:	3730      	adds	r7, #48	; 0x30
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40026080 	.word	0x40026080
 80018b4:	40005410 	.word	0x40005410
 80018b8:	2000004c 	.word	0x2000004c

080018bc <I2C1_clearDeviceAddress>:
uint8_t I2C1_getDeviceAddress(void) {
	return deviceAddrUseI2c;
}


void I2C1_clearDeviceAddress(void) {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	deviceAddrUseI2c = 0;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <I2C1_clearDeviceAddress+0x14>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000003c 	.word	0x2000003c

080018d4 <I2C1_getRxBuffer>:


int32_t I2C1_getRxBuffer(int index) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	return I2C_Rx_Buffer[index];
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <I2C1_getRxBuffer+0x1c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000004c 	.word	0x2000004c

080018f4 <I2C1_getReadRegister>:


uint8_t I2C1_getReadRegister(void) {
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	return readReg;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <I2C1_getReadRegister+0x10>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	2000003d 	.word	0x2000003d

08001908 <I2C1_clearReadRegister>:


void I2C1_clearReadRegister(void) {
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	readReg = 0;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <I2C1_clearReadRegister+0x14>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000003d 	.word	0x2000003d

08001920 <getTrueRandomNumber>:


// vygeneruje nahodne cislo pomocou ADC prevodu a CRC
uint8_t getTrueRandomNumber(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	// citame viackrat pre vyssi sum a nahodnost
	for (int i = 0; i < 10; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e034      	b.n	8001996 <getTrueRandomNumber+0x76>
	    // zacni AD prevod vnutornej teploty procesora
	    ADC_SoftwareStartConv(ADC1);
 800192c:	481e      	ldr	r0, [pc, #120]	; (80019a8 <getTrueRandomNumber+0x88>)
 800192e:	f7ff f827 	bl	8000980 <ADC_SoftwareStartConv>
	    // ak skoncil prevod
	    while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)) {}
 8001932:	bf00      	nop
 8001934:	2102      	movs	r1, #2
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <getTrueRandomNumber+0x88>)
 8001938:	f7ff f83e 	bl	80009b8 <ADC_GetFlagStatus>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f8      	beq.n	8001934 <getTrueRandomNumber+0x14>
	    // vratime 10-tu hodnotu kontrolneho suctu
	    if (i>=9){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b08      	cmp	r3, #8
 8001946:	dd18      	ble.n	800197a <getTrueRandomNumber+0x5a>
	    	ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
 8001948:	2102      	movs	r1, #2
 800194a:	4817      	ldr	r0, [pc, #92]	; (80019a8 <getTrueRandomNumber+0x88>)
 800194c:	f7ff f84e 	bl	80009ec <ADC_ClearFlag>
	    	// konvertujeme na cislo z rozsahu 1-6
	    	return (CRC_CalcCRC(ADC_GetConversionValue(ADC1))%6 + 1);
 8001950:	4815      	ldr	r0, [pc, #84]	; (80019a8 <getTrueRandomNumber+0x88>)
 8001952:	f7ff f825 	bl	80009a0 <ADC_GetConversionValue>
 8001956:	4603      	mov	r3, r0
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f857 	bl	8000a0c <CRC_CalcCRC>
 800195e:	4601      	mov	r1, r0
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <getTrueRandomNumber+0x8c>)
 8001962:	fba3 2301 	umull	r2, r3, r3, r1
 8001966:	089a      	lsrs	r2, r3, #2
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	1aca      	subs	r2, r1, r3
 8001972:	b2d3      	uxtb	r3, r2
 8001974:	3301      	adds	r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	e011      	b.n	800199e <getTrueRandomNumber+0x7e>
	    }
	    else {
	    	ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
 800197a:	2102      	movs	r1, #2
 800197c:	480a      	ldr	r0, [pc, #40]	; (80019a8 <getTrueRandomNumber+0x88>)
 800197e:	f7ff f835 	bl	80009ec <ADC_ClearFlag>
	    	CRC_CalcCRC(ADC_GetConversionValue(ADC1));
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <getTrueRandomNumber+0x88>)
 8001984:	f7ff f80c 	bl	80009a0 <ADC_GetConversionValue>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f83e 	bl	8000a0c <CRC_CalcCRC>


// vygeneruje nahodne cislo pomocou ADC prevodu a CRC
uint8_t getTrueRandomNumber(void) {
	// citame viackrat pre vyssi sum a nahodnost
	for (int i = 0; i < 10; i++) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b09      	cmp	r3, #9
 800199a:	ddc7      	ble.n	800192c <getTrueRandomNumber+0xc>
	    else {
	    	ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
	    	CRC_CalcCRC(ADC_GetConversionValue(ADC1));
	    }
	}
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40012400 	.word	0x40012400
 80019ac:	aaaaaaab 	.word	0xaaaaaaab

080019b0 <initButton>:


// inicializacia tlacidla pre spustenie prevodu
void initButton(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	// inicializacne struktura
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 80019b6:	2101      	movs	r1, #1
 80019b8:	2004      	movs	r0, #4
 80019ba:	f7ff fdb5 	bl	8001528 <RCC_AHBPeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80019be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80019c4:	2300      	movs	r3, #0
 80019c6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80019c8:	2300      	movs	r3, #0
 80019ca:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC,&GPIO_InitStructure);
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <initButton+0x34>)
 80019d6:	f7ff f9ad 	bl	8000d34 <GPIO_Init>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40020800 	.word	0x40020800

080019e8 <initADC>:


// inicializacia ADC prevodnika
void initADC(void){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
	// inicializacne struktury
	ADC_InitTypeDef ADC_InitStructure;

	// zapneme RCC a PLL periferie
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80019ee:	2101      	movs	r1, #1
 80019f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019f4:	f7ff fdb6 	bl	8001564 <RCC_APB2PeriphClockCmd>
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fc9f 	bl	800133c <RCC_SYSCLKConfig>
	RCC_HSICmd(ENABLE);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff fc8c 	bl	800131c <RCC_HSICmd>
	while (!RCC_GetFlagStatus(RCC_FLAG_HSIRDY));
 8001a04:	bf00      	nop
 8001a06:	2021      	movs	r0, #33	; 0x21
 8001a08:	f7ff fe24 	bl	8001654 <RCC_GetFlagStatus>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f9      	beq.n	8001a06 <initADC+0x1e>

	ADC_DeInit(ADC1);
 8001a12:	4815      	ldr	r0, [pc, #84]	; (8001a68 <initADC+0x80>)
 8001a14:	f7fe fdaa 	bl	800056c <ADC_DeInit>
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <initADC+0x80>)
 8001a36:	f7fe fdb1 	bl	800059c <ADC_Init>
	// povolime vnutorny kanal pre citanie teploty procesora
	ADC_TempSensorVrefintCmd(ENABLE);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7fe fe1e 	bl	800067c <ADC_TempSensorVrefintCmd>
	// zapneme AD prevodnik
	ADC_Cmd(ADC1, ENABLE);
 8001a40:	2101      	movs	r1, #1
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <initADC+0x80>)
 8001a44:	f7fe fdfe 	bl	8000644 <ADC_Cmd>
	// prevadzame pri najvyssej rychlosti aby sme vygenerovali najvyssi sum
	ADC_RegularChannelConfig(ADC1, ADC_Channel_16,1,ADC_SampleTime_4Cycles);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	4806      	ldr	r0, [pc, #24]	; (8001a68 <initADC+0x80>)
 8001a50:	f7fe fe30 	bl	80006b4 <ADC_RegularChannelConfig>
	// povolime hodiny pre RCC
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_CRC, ENABLE);
 8001a54:	2101      	movs	r1, #1
 8001a56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a5a:	f7ff fd65 	bl	8001528 <RCC_AHBPeriphClockCmd>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40012400 	.word	0x40012400

08001a6c <initI2C1>:


// inicializacia pre I2C zbernicu
void initI2C1(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001a72:	2101      	movs	r1, #1
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7ff fd57 	bl	8001528 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a80:	f7ff fd8e 	bl	80015a0 <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 8001a84:	2204      	movs	r2, #4
 8001a86:	2108      	movs	r1, #8
 8001a88:	481c      	ldr	r0, [pc, #112]	; (8001afc <initI2C1+0x90>)
 8001a8a:	f7ff f9e9 	bl	8000e60 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001a8e:	2204      	movs	r2, #4
 8001a90:	2109      	movs	r1, #9
 8001a92:	481a      	ldr	r0, [pc, #104]	; (8001afc <initI2C1+0x90>)
 8001a94:	f7ff f9e4 	bl	8000e60 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001a98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4811      	ldr	r0, [pc, #68]	; (8001afc <initI2C1+0x90>)
 8001ab6:	f7ff f93d 	bl	8000d34 <GPIO_Init>

	I2C_DeInit(I2C1);
 8001aba:	4811      	ldr	r0, [pc, #68]	; (8001b00 <initI2C1+0x94>)
 8001abc:	f7ff fa18 	bl	8000ef0 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8001ac4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001ac8:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Disable;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad6:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <initI2C1+0x98>)
 8001ada:	603b      	str	r3, [r7, #0]

	I2C_Init(I2C1, &I2C_InitStructure);
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4807      	ldr	r0, [pc, #28]	; (8001b00 <initI2C1+0x94>)
 8001ae2:	f7ff fa29 	bl	8000f38 <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <initI2C1+0x94>)
 8001aea:	f7ff fae7 	bl	80010bc <I2C_Cmd>
	//I2C_AcknowledgeConfig(I2C1, ENABLE);
	I2C1_initDMA();
 8001aee:	f7ff fe9d 	bl	800182c <I2C1_initDMA>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40005400 	.word	0x40005400
 8001b04:	00061a80 	.word	0x00061a80

08001b08 <I2C1_BytesWrite>:


void I2C1_BytesWrite(uint8_t slaveAddr, uint8_t pBuffer[], uint8_t length,uint8_t writeAddr) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6039      	str	r1, [r7, #0]
 8001b10:	4611      	mov	r1, r2
 8001b12:	461a      	mov	r2, r3
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71bb      	strb	r3, [r7, #6]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	717b      	strb	r3, [r7, #5]
	while (deviceAddrUseI2c != 0);
 8001b20:	bf00      	nop
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <I2C1_BytesWrite+0xc8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1fb      	bne.n	8001b22 <I2C1_BytesWrite+0x1a>
	deviceAddrUseI2c = slaveAddr;
 8001b2a:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <I2C1_BytesWrite+0xc8>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	7013      	strb	r3, [r2, #0]
	I2C_GenerateSTART(I2C1, ENABLE);
 8001b30:	2101      	movs	r1, #1
 8001b32:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001b34:	f7ff fae2 	bl	80010fc <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001b38:	bf00      	nop
 8001b3a:	4927      	ldr	r1, [pc, #156]	; (8001bd8 <I2C1_BytesWrite+0xd0>)
 8001b3c:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001b3e:	f7ff fb8b 	bl	8001258 <I2C_CheckEvent>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f8      	beq.n	8001b3a <I2C1_BytesWrite+0x32>
	I2C_Send7bitAddress(I2C1, slaveAddr, I2C_Direction_Transmitter);
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4821      	ldr	r0, [pc, #132]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001b50:	f7ff fb14 	bl	800117c <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001b54:	bf00      	nop
 8001b56:	4921      	ldr	r1, [pc, #132]	; (8001bdc <I2C1_BytesWrite+0xd4>)
 8001b58:	481e      	ldr	r0, [pc, #120]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001b5a:	f7ff fb7d 	bl	8001258 <I2C_CheckEvent>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f8      	beq.n	8001b56 <I2C1_BytesWrite+0x4e>
	I2C_SendData(I2C1, writeAddr);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	4619      	mov	r1, r3
 8001b68:	481a      	ldr	r0, [pc, #104]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001b6a:	f7ff fb25 	bl	80011b8 <I2C_SendData>
	for (int i = 0; i < length; i++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e014      	b.n	8001b9e <I2C1_BytesWrite+0x96>
		I2C_SendData(I2C1, pBuffer[i]);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001b80:	f7ff fb1a 	bl	80011b8 <I2C_SendData>
		for (int x = 0; x < 1000; x++);
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	e002      	b.n	8001b90 <I2C1_BytesWrite+0x88>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b96:	dbf8      	blt.n	8001b8a <I2C1_BytesWrite+0x82>
	I2C_GenerateSTART(I2C1, ENABLE);
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(I2C1, slaveAddr, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	I2C_SendData(I2C1, writeAddr);
	for (int i = 0; i < length; i++) {
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	79ba      	ldrb	r2, [r7, #6]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dce6      	bgt.n	8001b74 <I2C1_BytesWrite+0x6c>
		I2C_SendData(I2C1, pBuffer[i]);
		for (int x = 0; x < 1000; x++);
	}
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001ba6:	bf00      	nop
 8001ba8:	490d      	ldr	r1, [pc, #52]	; (8001be0 <I2C1_BytesWrite+0xd8>)
 8001baa:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001bac:	f7ff fb54 	bl	8001258 <I2C_CheckEvent>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f8      	beq.n	8001ba8 <I2C1_BytesWrite+0xa0>
	I2C_GenerateSTOP(I2C1, ENABLE);
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <I2C1_BytesWrite+0xcc>)
 8001bba:	f7ff fabf 	bl	800113c <I2C_GenerateSTOP>
	I2C1_clearReadRegister();
 8001bbe:	f7ff fea3 	bl	8001908 <I2C1_clearReadRegister>
	I2C1_clearDeviceAddress();
 8001bc2:	f7ff fe7b 	bl	80018bc <I2C1_clearDeviceAddress>
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000003c 	.word	0x2000003c
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	00030001 	.word	0x00030001
 8001bdc:	00070082 	.word	0x00070082
 8001be0:	00070084 	.word	0x00070084

08001be4 <I2C1_DMA_Read>:


void I2C1_DMA_Read(uint8_t slaveAddr, uint8_t readAddr,uint8_t numberBytesReceive) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	71bb      	strb	r3, [r7, #6]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	717b      	strb	r3, [r7, #5]
	while (deviceAddrUseI2c != 0);
 8001bf6:	bf00      	nop
 8001bf8:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <I2C1_DMA_Read+0xf8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1fb      	bne.n	8001bf8 <I2C1_DMA_Read+0x14>
	deviceAddrUseI2c = slaveAddr;
 8001c00:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <I2C1_DMA_Read+0xf8>)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	7013      	strb	r3, [r2, #0]
	readReg = readAddr;
 8001c06:	4a36      	ldr	r2, [pc, #216]	; (8001ce0 <I2C1_DMA_Read+0xfc>)
 8001c08:	79bb      	ldrb	r3, [r7, #6]
 8001c0a:	7013      	strb	r3, [r2, #0]
	// vypneme DMA kanal
	DMA_Cmd(DMA1_Channel7, DISABLE);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4835      	ldr	r0, [pc, #212]	; (8001ce4 <I2C1_DMA_Read+0x100>)
 8001c10:	f7ff f806 	bl	8000c20 <DMA_Cmd>
	// nastavime pocet bytov (mozne len po vypnuti kanala)
	DMA_SetCurrDataCounter(DMA1_Channel7, numberBytesReceive);
 8001c14:	797b      	ldrb	r3, [r7, #5]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4832      	ldr	r0, [pc, #200]	; (8001ce4 <I2C1_DMA_Read+0x100>)
 8001c1c:	f7ff f81c 	bl	8000c58 <DMA_SetCurrDataCounter>
	// kym je zmernica zaneprazdnena
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 8001c20:	bf00      	nop
 8001c22:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001c26:	4830      	ldr	r0, [pc, #192]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c28:	f7ff fb46 	bl	80012b8 <I2C_GetFlagStatus>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f7      	bne.n	8001c22 <I2C1_DMA_Read+0x3e>
	// povolime automaticke generovanie NACK
	I2C_DMALastTransferCmd(I2C1, ENABLE);
 8001c32:	2101      	movs	r1, #1
 8001c34:	482c      	ldr	r0, [pc, #176]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c36:	f7ff faef 	bl	8001218 <I2C_DMALastTransferCmd>
	// vygenerujeme zacatie komunikacie
	I2C_GenerateSTART(I2C1, ENABLE);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	482a      	ldr	r0, [pc, #168]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c3e:	f7ff fa5d 	bl	80010fc <I2C_GenerateSTART>
	// testujeme EV5 a vynulujeme
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001c42:	bf00      	nop
 8001c44:	4929      	ldr	r1, [pc, #164]	; (8001cec <I2C1_DMA_Read+0x108>)
 8001c46:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c48:	f7ff fb06 	bl	8001258 <I2C_CheckEvent>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f8      	beq.n	8001c44 <I2C1_DMA_Read+0x60>
	// odosleme adresu na zapis
	I2C_Send7bitAddress(I2C1, slaveAddr, I2C_Direction_Transmitter);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c5a:	f7ff fa8f 	bl	800117c <I2C_Send7bitAddress>
	// testujeme EV6 a vynulujeme
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001c5e:	bf00      	nop
 8001c60:	4923      	ldr	r1, [pc, #140]	; (8001cf0 <I2C1_DMA_Read+0x10c>)
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c64:	f7ff faf8 	bl	8001258 <I2C_CheckEvent>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f8      	beq.n	8001c60 <I2C1_DMA_Read+0x7c>
	// vynulujeme EV6 tym, ze nastavime PE bit
	I2C_Cmd(I2C1, ENABLE);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	481d      	ldr	r0, [pc, #116]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c72:	f7ff fa23 	bl	80010bc <I2C_Cmd>
	// odosleme vnutornu adresu do ktorej budeme zapisovat
	I2C_SendData(I2C1, readAddr);
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c7c:	f7ff fa9c 	bl	80011b8 <I2C_SendData>
	// testujeme EV8 a vynulujeme
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001c80:	bf00      	nop
 8001c82:	491c      	ldr	r1, [pc, #112]	; (8001cf4 <I2C1_DMA_Read+0x110>)
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c86:	f7ff fae7 	bl	8001258 <I2C_CheckEvent>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f8      	beq.n	8001c82 <I2C1_DMA_Read+0x9e>
	// vygenerujeme zacatie komunikacie po druhykrat
	I2C_GenerateSTART(I2C1, ENABLE);
 8001c90:	2101      	movs	r1, #1
 8001c92:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c94:	f7ff fa32 	bl	80010fc <I2C_GenerateSTART>
	// testujeme EV5 a vynulujeme
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001c98:	bf00      	nop
 8001c9a:	4914      	ldr	r1, [pc, #80]	; (8001cec <I2C1_DMA_Read+0x108>)
 8001c9c:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001c9e:	f7ff fadb 	bl	8001258 <I2C_CheckEvent>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f8      	beq.n	8001c9a <I2C1_DMA_Read+0xb6>
	// odosleme adresu na citanie
	I2C_Send7bitAddress(I2C1, slaveAddr, I2C_Direction_Receiver);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001cb0:	f7ff fa64 	bl	800117c <I2C_Send7bitAddress>
	// testujeme EV6 a vynulujeme
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8001cb4:	bf00      	nop
 8001cb6:	4910      	ldr	r1, [pc, #64]	; (8001cf8 <I2C1_DMA_Read+0x114>)
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001cba:	f7ff facd 	bl	8001258 <I2C_CheckEvent>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f8      	beq.n	8001cb6 <I2C1_DMA_Read+0xd2>
	// zapneme DMA pre zacatie komunikacie
	DMA_Cmd(DMA1_Channel7, ENABLE);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <I2C1_DMA_Read+0x100>)
 8001cc8:	f7fe ffaa 	bl	8000c20 <DMA_Cmd>
	I2C_DMACmd(I2C1, ENABLE);
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <I2C1_DMA_Read+0x104>)
 8001cd0:	f7ff fa82 	bl	80011d8 <I2C_DMACmd>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000003c 	.word	0x2000003c
 8001ce0:	2000003d 	.word	0x2000003d
 8001ce4:	40026080 	.word	0x40026080
 8001ce8:	40005400 	.word	0x40005400
 8001cec:	00030001 	.word	0x00030001
 8001cf0:	00070082 	.word	0x00070082
 8001cf4:	00070084 	.word	0x00070084
 8001cf8:	00030002 	.word	0x00030002

08001cfc <diceSide>:
	USART_Init(USART2, &USART_InitStructure);
	USART_Cmd(USART2, ENABLE);
}

// na zaklade akcelerometra zistime stranu kocky
char diceSide(MPU6050_t* Sensor){
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	if ( (Sensor->Akcelerometer_X > 10000) && (Sensor->Akcelerometer_Y < 10000)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	dd0f      	ble.n	8001d32 <diceSide+0x36>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d18:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	dc08      	bgt.n	8001d32 <diceSide+0x36>
			&& (Sensor->Akcelerometer_Z < 10000) ){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d26:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	dc01      	bgt.n	8001d32 <diceSide+0x36>
		return 4;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e06a      	b.n	8001e08 <diceSide+0x10c>
	}
	else if( (Sensor->Akcelerometer_X < -10000) && (Sensor->Akcelerometer_Y > -10000)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d38:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <diceSide+0x118>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	da0d      	bge.n	8001d5a <diceSide+0x5e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d44:	4a34      	ldr	r2, [pc, #208]	; (8001e18 <diceSide+0x11c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	db07      	blt.n	8001d5a <diceSide+0x5e>
			&& (Sensor->Akcelerometer_Z > -10000) ){
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d50:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <diceSide+0x11c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	db01      	blt.n	8001d5a <diceSide+0x5e>
		return 3;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e056      	b.n	8001e08 <diceSide+0x10c>
	}
	else if( (Sensor->Akcelerometer_Y > 10000) && (Sensor->Akcelerometer_X < 10000)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d64:	4293      	cmp	r3, r2
 8001d66:	dd0f      	ble.n	8001d88 <diceSide+0x8c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d72:	4293      	cmp	r3, r2
 8001d74:	dc08      	bgt.n	8001d88 <diceSide+0x8c>
			&& (Sensor->Akcelerometer_Z < 10000) ){
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d80:	4293      	cmp	r3, r2
 8001d82:	dc01      	bgt.n	8001d88 <diceSide+0x8c>
		return 5;
 8001d84:	2305      	movs	r3, #5
 8001d86:	e03f      	b.n	8001e08 <diceSide+0x10c>
	}
	else if( (Sensor->Akcelerometer_Y < -10000) && (Sensor->Akcelerometer_X > -10000)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <diceSide+0x118>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	da0d      	bge.n	8001db0 <diceSide+0xb4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <diceSide+0x11c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	db07      	blt.n	8001db0 <diceSide+0xb4>
			&& (Sensor->Akcelerometer_Z > -10000) ){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <diceSide+0x11c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	db01      	blt.n	8001db0 <diceSide+0xb4>
		return 2;
 8001dac:	2302      	movs	r3, #2
 8001dae:	e02b      	b.n	8001e08 <diceSide+0x10c>
	}
	else if( (Sensor->Akcelerometer_Z > 10000) && (Sensor->Akcelerometer_X < 10000)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001db6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	dd0f      	ble.n	8001dde <diceSide+0xe2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001dc4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	dc08      	bgt.n	8001dde <diceSide+0xe2>
			&& (Sensor->Akcelerometer_Y < 10000) ){
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	dc01      	bgt.n	8001dde <diceSide+0xe2>
		return 6;
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e014      	b.n	8001e08 <diceSide+0x10c>
	}
	else if( (Sensor->Akcelerometer_Z < -10000) && (Sensor->Akcelerometer_X > -10000)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <diceSide+0x118>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	da0d      	bge.n	8001e06 <diceSide+0x10a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001df0:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <diceSide+0x11c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	db07      	blt.n	8001e06 <diceSide+0x10a>
			&& (Sensor->Akcelerometer_Y > -10000) ){
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <diceSide+0x11c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	db01      	blt.n	8001e06 <diceSide+0x10a>
		return 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <diceSide+0x10c>
	}
	else{
		return -1;
 8001e06:	23ff      	movs	r3, #255	; 0xff
	}
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	ffffd8f0 	.word	0xffffd8f0
 8001e18:	ffffd8f1 	.word	0xffffd8f1

08001e1c <clearDisplay>:
    USART_SendData(USART2, *s++);
  }
}


void clearDisplay(uint16_t colour){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
	lcdFilledRectangle(0,0,129,130,colour);
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2382      	movs	r3, #130	; 0x82
 8001e2c:	2281      	movs	r2, #129	; 0x81
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2000      	movs	r0, #0
 8001e32:	f000 fbe9 	bl	8002608 <lcdFilledRectangle>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <lcdFilledCircle>:


void lcdFilledCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4604      	mov	r4, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	80fb      	strh	r3, [r7, #6]
 8001e52:	4603      	mov	r3, r0
 8001e54:	80bb      	strh	r3, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	82fb      	strh	r3, [r7, #22]
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	82bb      	strh	r3, [r7, #20]
	int16_t tmp_radius = radius;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	827b      	strh	r3, [r7, #18]
	int16_t d = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	823b      	strh	r3, [r7, #16]

	for(int i = 0; i < radius; i++){
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e0c1      	b.n	8001ff8 <lcdFilledCircle+0x1b8>
		d = 3 - (2 * tmp_radius);
 8001e74:	8a7b      	ldrh	r3, [r7, #18]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f1c3 0303 	rsb	r3, r3, #3
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	823b      	strh	r3, [r7, #16]
		y = tmp_radius;
 8001e82:	8a7b      	ldrh	r3, [r7, #18]
 8001e84:	82bb      	strh	r3, [r7, #20]
		x = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	82fb      	strh	r3, [r7, #22]
		   while(x <= y)
 8001e8a:	e0a5      	b.n	8001fd8 <lcdFilledCircle+0x198>
			{
				lcdPlot(xCentre + x, yCentre + y, colour);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	8afb      	ldrh	r3, [r7, #22]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	b2d8      	uxtb	r0, r3
 8001e98:	88bb      	ldrh	r3, [r7, #4]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	8abb      	ldrh	r3, [r7, #20]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	883a      	ldrh	r2, [r7, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f000 fa80 	bl	80023ac <lcdPlot>
				lcdPlot(xCentre + y, yCentre + x, colour);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	8abb      	ldrh	r3, [r7, #20]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b2d8      	uxtb	r0, r3
 8001eb8:	88bb      	ldrh	r3, [r7, #4]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	8afb      	ldrh	r3, [r7, #22]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	883a      	ldrh	r2, [r7, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f000 fa70 	bl	80023ac <lcdPlot>
				lcdPlot(xCentre - x, yCentre + y, colour);
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b2d8      	uxtb	r0, r3
 8001ed8:	88bb      	ldrh	r3, [r7, #4]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	8abb      	ldrh	r3, [r7, #20]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	883a      	ldrh	r2, [r7, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f000 fa60 	bl	80023ac <lcdPlot>
				lcdPlot(xCentre + y, yCentre - x, colour);
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	8abb      	ldrh	r3, [r7, #20]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2d8      	uxtb	r0, r3
 8001ef8:	88bb      	ldrh	r3, [r7, #4]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	8afb      	ldrh	r3, [r7, #22]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	883a      	ldrh	r2, [r7, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	f000 fa50 	bl	80023ac <lcdPlot>
				lcdPlot(xCentre - x, yCentre - y, colour);
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	8afb      	ldrh	r3, [r7, #22]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	b2d8      	uxtb	r0, r3
 8001f18:	88bb      	ldrh	r3, [r7, #4]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	8abb      	ldrh	r3, [r7, #20]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	883a      	ldrh	r2, [r7, #0]
 8001f26:	4619      	mov	r1, r3
 8001f28:	f000 fa40 	bl	80023ac <lcdPlot>
				lcdPlot(xCentre - y, yCentre - x, colour);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	8abb      	ldrh	r3, [r7, #20]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	b2d8      	uxtb	r0, r3
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	8afb      	ldrh	r3, [r7, #22]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	883a      	ldrh	r2, [r7, #0]
 8001f46:	4619      	mov	r1, r3
 8001f48:	f000 fa30 	bl	80023ac <lcdPlot>
				lcdPlot(xCentre + x, yCentre - y, colour);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	8afb      	ldrh	r3, [r7, #22]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	b2d8      	uxtb	r0, r3
 8001f58:	88bb      	ldrh	r3, [r7, #4]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	8abb      	ldrh	r3, [r7, #20]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	883a      	ldrh	r2, [r7, #0]
 8001f66:	4619      	mov	r1, r3
 8001f68:	f000 fa20 	bl	80023ac <lcdPlot>
				lcdPlot(xCentre - y, yCentre + x, colour);
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	8abb      	ldrh	r3, [r7, #20]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	b2d8      	uxtb	r0, r3
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	883a      	ldrh	r2, [r7, #0]
 8001f86:	4619      	mov	r1, r3
 8001f88:	f000 fa10 	bl	80023ac <lcdPlot>

				if (d < 0) d += (4 * x) + 6;
 8001f8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da09      	bge.n	8001fa8 <lcdFilledCircle+0x168>
 8001f94:	8afb      	ldrh	r3, [r7, #22]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	8a3b      	ldrh	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3306      	adds	r3, #6
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	823b      	strh	r3, [r7, #16]
 8001fa6:	e011      	b.n	8001fcc <lcdFilledCircle+0x18c>
				else
				{
					d += (4 * (x - y)) + 10;
 8001fa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	8a3b      	ldrh	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	330a      	adds	r3, #10
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	823b      	strh	r3, [r7, #16]
					y -= 1;
 8001fc4:	8abb      	ldrh	r3, [r7, #20]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	82bb      	strh	r3, [r7, #20]
				}

				x++;
 8001fcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	82fb      	strh	r3, [r7, #22]

	for(int i = 0; i < radius; i++){
		d = 3 - (2 * tmp_radius);
		y = tmp_radius;
		x = 0;
		   while(x <= y)
 8001fd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f77f af53 	ble.w	8001e8c <lcdFilledCircle+0x4c>
					y -= 1;
				}

				x++;
			}
		   tmp_radius--;
 8001fe6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	827b      	strh	r3, [r7, #18]
{
	int16_t x = 0, y = radius;
	int16_t tmp_radius = radius;
	int16_t d = 0;

	for(int i = 0; i < radius; i++){
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	f73f af38 	bgt.w	8001e74 <lcdFilledCircle+0x34>

				x++;
			}
		   tmp_radius--;
	}
}
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <lcdMriezka3x3>:


void lcdMriezka3x3(int16_t x0, int16_t y0, uint16_t cislo, uint16_t colour1, uint16_t colour2){
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	4604      	mov	r4, r0
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4623      	mov	r3, r4
 800201c:	80fb      	strh	r3, [r7, #6]
 800201e:	4603      	mov	r3, r0
 8002020:	80bb      	strh	r3, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	807b      	strh	r3, [r7, #2]
 8002026:	4613      	mov	r3, r2
 8002028:	803b      	strh	r3, [r7, #0]
	/* 00 01 02
	 * 10 11 12
	 * 20 21 22
	 */

	for(i = 0; i < 3; i++){
 800202a:	2300      	movs	r3, #0
 800202c:	81fb      	strh	r3, [r7, #14]
 800202e:	e092      	b.n	8002156 <lcdMriezka3x3+0x14a>
		for(j = 0; j<3; j++){
 8002030:	2300      	movs	r3, #0
 8002032:	81bb      	strh	r3, [r7, #12]
 8002034:	e088      	b.n	8002148 <lcdMriezka3x3+0x13c>
			switch(cislo) {
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	3b01      	subs	r3, #1
 800203a:	2b05      	cmp	r3, #5
 800203c:	d869      	bhi.n	8002112 <lcdMriezka3x3+0x106>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <lcdMriezka3x3+0x38>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002075 	.word	0x08002075
 800204c:	08002099 	.word	0x08002099
 8002050:	080020ad 	.word	0x080020ad
 8002054:	080020d1 	.word	0x080020d1
 8002058:	08002101 	.word	0x08002101

			   case 1:
			      if(i == 1 && j == 1) farba = colour1;
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d105      	bne.n	800206e <lcdMriezka3x3+0x62>
 8002062:	89bb      	ldrh	r3, [r7, #12]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d102      	bne.n	800206e <lcdMriezka3x3+0x62>
 8002068:	883b      	ldrh	r3, [r7, #0]
 800206a:	817b      	strh	r3, [r7, #10]
				  else farba = colour2;
			      break;
 800206c:	e051      	b.n	8002112 <lcdMriezka3x3+0x106>
		for(j = 0; j<3; j++){
			switch(cislo) {

			   case 1:
			      if(i == 1 && j == 1) farba = colour1;
				  else farba = colour2;
 800206e:	8c3b      	ldrh	r3, [r7, #32]
 8002070:	817b      	strh	r3, [r7, #10]
			      break;
 8002072:	e04e      	b.n	8002112 <lcdMriezka3x3+0x106>
			   case 2:
				  if((i == 0 && j == 0)||(i == 2 && j == 2)) farba = colour1;
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <lcdMriezka3x3+0x74>
 800207a:	89bb      	ldrh	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <lcdMriezka3x3+0x80>
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d105      	bne.n	8002092 <lcdMriezka3x3+0x86>
 8002086:	89bb      	ldrh	r3, [r7, #12]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d102      	bne.n	8002092 <lcdMriezka3x3+0x86>
 800208c:	883b      	ldrh	r3, [r7, #0]
 800208e:	817b      	strh	r3, [r7, #10]
				  else farba = colour2;
			      break;
 8002090:	e03f      	b.n	8002112 <lcdMriezka3x3+0x106>
			      if(i == 1 && j == 1) farba = colour1;
				  else farba = colour2;
			      break;
			   case 2:
				  if((i == 0 && j == 0)||(i == 2 && j == 2)) farba = colour1;
				  else farba = colour2;
 8002092:	8c3b      	ldrh	r3, [r7, #32]
 8002094:	817b      	strh	r3, [r7, #10]
			      break;
 8002096:	e03c      	b.n	8002112 <lcdMriezka3x3+0x106>
			   case 3:
				  if(i == j) farba = colour1;
 8002098:	89fa      	ldrh	r2, [r7, #14]
 800209a:	89bb      	ldrh	r3, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d102      	bne.n	80020a6 <lcdMriezka3x3+0x9a>
 80020a0:	883b      	ldrh	r3, [r7, #0]
 80020a2:	817b      	strh	r3, [r7, #10]
				  else farba = colour2;
				  break;
 80020a4:	e035      	b.n	8002112 <lcdMriezka3x3+0x106>
				  if((i == 0 && j == 0)||(i == 2 && j == 2)) farba = colour1;
				  else farba = colour2;
			      break;
			   case 3:
				  if(i == j) farba = colour1;
				  else farba = colour2;
 80020a6:	8c3b      	ldrh	r3, [r7, #32]
 80020a8:	817b      	strh	r3, [r7, #10]
				  break;
 80020aa:	e032      	b.n	8002112 <lcdMriezka3x3+0x106>
			   case 4:
			      if((i == 0 && j != 1) || (i == 2 && j != 1)) farba = colour1;
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <lcdMriezka3x3+0xac>
 80020b2:	89bb      	ldrh	r3, [r7, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d105      	bne.n	80020c4 <lcdMriezka3x3+0xb8>
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d105      	bne.n	80020ca <lcdMriezka3x3+0xbe>
 80020be:	89bb      	ldrh	r3, [r7, #12]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d002      	beq.n	80020ca <lcdMriezka3x3+0xbe>
 80020c4:	883b      	ldrh	r3, [r7, #0]
 80020c6:	817b      	strh	r3, [r7, #10]
				  else farba = colour2;
				  break;
 80020c8:	e023      	b.n	8002112 <lcdMriezka3x3+0x106>
				  if(i == j) farba = colour1;
				  else farba = colour2;
				  break;
			   case 4:
			      if((i == 0 && j != 1) || (i == 2 && j != 1)) farba = colour1;
				  else farba = colour2;
 80020ca:	8c3b      	ldrh	r3, [r7, #32]
 80020cc:	817b      	strh	r3, [r7, #10]
				  break;
 80020ce:	e020      	b.n	8002112 <lcdMriezka3x3+0x106>
			   case 5:
				  if((i == 0 && j != 1) || (i == 2 && j != 1) || (i == 1 && j == 1)) farba = colour1;
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <lcdMriezka3x3+0xd0>
 80020d6:	89bb      	ldrh	r3, [r7, #12]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10b      	bne.n	80020f4 <lcdMriezka3x3+0xe8>
 80020dc:	89fb      	ldrh	r3, [r7, #14]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d102      	bne.n	80020e8 <lcdMriezka3x3+0xdc>
 80020e2:	89bb      	ldrh	r3, [r7, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <lcdMriezka3x3+0xe8>
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <lcdMriezka3x3+0xee>
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <lcdMriezka3x3+0xee>
 80020f4:	883b      	ldrh	r3, [r7, #0]
 80020f6:	817b      	strh	r3, [r7, #10]
				  else farba = colour2;
				  break;
 80020f8:	e00b      	b.n	8002112 <lcdMriezka3x3+0x106>
			      if((i == 0 && j != 1) || (i == 2 && j != 1)) farba = colour1;
				  else farba = colour2;
				  break;
			   case 5:
				  if((i == 0 && j != 1) || (i == 2 && j != 1) || (i == 1 && j == 1)) farba = colour1;
				  else farba = colour2;
 80020fa:	8c3b      	ldrh	r3, [r7, #32]
 80020fc:	817b      	strh	r3, [r7, #10]
				  break;
 80020fe:	e008      	b.n	8002112 <lcdMriezka3x3+0x106>
			   case 6:
				  if(j != 1) farba = colour1;
 8002100:	89bb      	ldrh	r3, [r7, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d002      	beq.n	800210c <lcdMriezka3x3+0x100>
 8002106:	883b      	ldrh	r3, [r7, #0]
 8002108:	817b      	strh	r3, [r7, #10]
				  else farba = colour2;
				  break;
 800210a:	e001      	b.n	8002110 <lcdMriezka3x3+0x104>
				  if((i == 0 && j != 1) || (i == 2 && j != 1) || (i == 1 && j == 1)) farba = colour1;
				  else farba = colour2;
				  break;
			   case 6:
				  if(j != 1) farba = colour1;
				  else farba = colour2;
 800210c:	8c3b      	ldrh	r3, [r7, #32]
 800210e:	817b      	strh	r3, [r7, #10]
				  break;
 8002110:	bf00      	nop
			}

			//lcdStvorcek(x0 + j*10, y0 +i*10, farba);
			lcdFilledCircle(x0 + j*10, y0 +i*10, 3, farba);
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4413      	add	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	4413      	add	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	b218      	sxth	r0, r3
 8002126:	89fb      	ldrh	r3, [r7, #14]
 8002128:	461a      	mov	r2, r3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4413      	add	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	88bb      	ldrh	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	b219      	sxth	r1, r3
 800213a:	897b      	ldrh	r3, [r7, #10]
 800213c:	2203      	movs	r2, #3
 800213e:	f7ff fe7f 	bl	8001e40 <lcdFilledCircle>
	 * 10 11 12
	 * 20 21 22
	 */

	for(i = 0; i < 3; i++){
		for(j = 0; j<3; j++){
 8002142:	89bb      	ldrh	r3, [r7, #12]
 8002144:	3301      	adds	r3, #1
 8002146:	81bb      	strh	r3, [r7, #12]
 8002148:	89bb      	ldrh	r3, [r7, #12]
 800214a:	2b02      	cmp	r3, #2
 800214c:	f67f af73 	bls.w	8002036 <lcdMriezka3x3+0x2a>
	/* 00 01 02
	 * 10 11 12
	 * 20 21 22
	 */

	for(i = 0; i < 3; i++){
 8002150:	89fb      	ldrh	r3, [r7, #14]
 8002152:	3301      	adds	r3, #1
 8002154:	81fb      	strh	r3, [r7, #14]
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	2b02      	cmp	r3, #2
 800215a:	f67f af69 	bls.w	8002030 <lcdMriezka3x3+0x24>

			//lcdStvorcek(x0 + j*10, y0 +i*10, farba);
			lcdFilledCircle(x0 + j*10, y0 +i*10, 3, farba);
		}
	}
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop

08002168 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 800216c:	f000 ff04 	bl	8002f78 <res_reset>
	Delay(10000);
 8002170:	f242 7010 	movw	r0, #10000	; 0x2710
 8002174:	f000 ff0c 	bl	8002f90 <Delay>

	res_set();
 8002178:	f000 fef2 	bl	8002f60 <res_set>
	Delay(10000);
 800217c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002180:	f000 ff06 	bl	8002f90 <Delay>
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8002192:	f000 febb 	bl	8002f0c <cd_reset>

	readWriteSPI2(address);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fe4b 	bl	8002e34 <readWriteSPI2>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop

080021a8 <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
	cd_set();
 80021b2:	f000 fe9f 	bl	8002ef4 <cd_set>

	readWriteSPI2(parameter);
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fe3b 	bl	8002e34 <readWriteSPI2>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop

080021c8 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	460a      	mov	r2, r1
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71bb      	strb	r3, [r7, #6]
	cd_set();
 80021d8:	f000 fe8c 	bl	8002ef4 <cd_set>

	readWriteSPI2(dataByte1);
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fe28 	bl	8002e34 <readWriteSPI2>
	readWriteSPI2(dataByte2);
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fe24 	bl	8002e34 <readWriteSPI2>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <lcdInitialise>:

// Initialise the display with the require screen orientation
void lcdInitialise(uint8_t orientation)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 80021fe:	f7ff ffb3 	bl	8002168 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8002202:	2011      	movs	r0, #17
 8002204:	f7ff ffc0 	bl	8002188 <lcdWriteCommand>
    Delay(10000); // Wait for the screen to wake up
 8002208:	f242 7010 	movw	r0, #10000	; 0x2710
 800220c:	f000 fec0 	bl	8002f90 <Delay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8002210:	203a      	movs	r0, #58	; 0x3a
 8002212:	f7ff ffb9 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8002216:	2005      	movs	r0, #5
 8002218:	f7ff ffc6 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 800221c:	2026      	movs	r0, #38	; 0x26
 800221e:	f7ff ffb3 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8002222:	2004      	movs	r0, #4
 8002224:	f7ff ffc0 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8002228:	20f2      	movs	r0, #242	; 0xf2
 800222a:	f7ff ffad 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 800222e:	2001      	movs	r0, #1
 8002230:	f7ff ffba 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8002234:	20e0      	movs	r0, #224	; 0xe0
 8002236:	f7ff ffa7 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 800223a:	203f      	movs	r0, #63	; 0x3f
 800223c:	f7ff ffb4 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8002240:	2025      	movs	r0, #37	; 0x25
 8002242:	f7ff ffb1 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8002246:	201c      	movs	r0, #28
 8002248:	f7ff ffae 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 800224c:	201e      	movs	r0, #30
 800224e:	f7ff ffab 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8002252:	2020      	movs	r0, #32
 8002254:	f7ff ffa8 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8002258:	2012      	movs	r0, #18
 800225a:	f7ff ffa5 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 800225e:	202a      	movs	r0, #42	; 0x2a
 8002260:	f7ff ffa2 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8002264:	2090      	movs	r0, #144	; 0x90
 8002266:	f7ff ff9f 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 800226a:	2024      	movs	r0, #36	; 0x24
 800226c:	f7ff ff9c 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8002270:	2011      	movs	r0, #17
 8002272:	f7ff ff99 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff ff96 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff ff93 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff ff90 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff ff8d 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff ff8a 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8002294:	20e1      	movs	r0, #225	; 0xe1
 8002296:	f7ff ff77 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 800229a:	2020      	movs	r0, #32
 800229c:	f7ff ff84 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 80022a0:	2020      	movs	r0, #32
 80022a2:	f7ff ff81 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 80022a6:	2020      	movs	r0, #32
 80022a8:	f7ff ff7e 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 80022ac:	2020      	movs	r0, #32
 80022ae:	f7ff ff7b 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 80022b2:	2005      	movs	r0, #5
 80022b4:	f7ff ff78 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ff75 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 80022be:	2015      	movs	r0, #21
 80022c0:	f7ff ff72 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 80022c4:	20a7      	movs	r0, #167	; 0xa7
 80022c6:	f7ff ff6f 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 80022ca:	203d      	movs	r0, #61	; 0x3d
 80022cc:	f7ff ff6c 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 80022d0:	2018      	movs	r0, #24
 80022d2:	f7ff ff69 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 80022d6:	2025      	movs	r0, #37	; 0x25
 80022d8:	f7ff ff66 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 80022dc:	202a      	movs	r0, #42	; 0x2a
 80022de:	f7ff ff63 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 80022e2:	202b      	movs	r0, #43	; 0x2b
 80022e4:	f7ff ff60 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 80022e8:	202b      	movs	r0, #43	; 0x2b
 80022ea:	f7ff ff5d 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 80022ee:	203a      	movs	r0, #58	; 0x3a
 80022f0:	f7ff ff5a 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 80022f4:	20b1      	movs	r0, #177	; 0xb1
 80022f6:	f7ff ff47 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 80022fa:	2008      	movs	r0, #8
 80022fc:	f7ff ff54 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8002300:	2008      	movs	r0, #8
 8002302:	f7ff ff51 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8002306:	20b4      	movs	r0, #180	; 0xb4
 8002308:	f7ff ff3e 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800230c:	2007      	movs	r0, #7
 800230e:	f7ff ff4b 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8002312:	20c0      	movs	r0, #192	; 0xc0
 8002314:	f7ff ff38 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8002318:	200a      	movs	r0, #10
 800231a:	f7ff ff45 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 800231e:	2002      	movs	r0, #2
 8002320:	f7ff ff42 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8002324:	20c1      	movs	r0, #193	; 0xc1
 8002326:	f7ff ff2f 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 800232a:	2002      	movs	r0, #2
 800232c:	f7ff ff3c 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8002330:	20c5      	movs	r0, #197	; 0xc5
 8002332:	f7ff ff29 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8002336:	2050      	movs	r0, #80	; 0x50
 8002338:	f7ff ff36 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 800233c:	205b      	movs	r0, #91	; 0x5b
 800233e:	f7ff ff33 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8002342:	20c7      	movs	r0, #199	; 0xc7
 8002344:	f7ff ff20 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8002348:	2040      	movs	r0, #64	; 0x40
 800234a:	f7ff ff2d 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 800234e:	202a      	movs	r0, #42	; 0x2a
 8002350:	f7ff ff1a 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff ff27 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff ff24 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff ff21 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8002366:	207f      	movs	r0, #127	; 0x7f
 8002368:	f7ff ff1e 	bl	80021a8 <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 800236c:	202b      	movs	r0, #43	; 0x2b
 800236e:	f7ff ff0b 	bl	8002188 <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff ff18 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff ff15 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff ff12 	bl	80021a8 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8002384:	207f      	movs	r0, #127	; 0x7f
 8002386:	f7ff ff0f 	bl	80021a8 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 800238a:	2036      	movs	r0, #54	; 0x36
 800238c:	f7ff fefc 	bl	8002188 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff08 	bl	80021a8 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8002398:	2029      	movs	r0, #41	; 0x29
 800239a:	f7ff fef5 	bl	8002188 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 800239e:	202c      	movs	r0, #44	; 0x2c
 80023a0:	f7ff fef2 	bl	8002188 <lcdWriteCommand>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <lcdPlot>:
	lcdWriteCommand(WRITE_MEMORY_START);
	for(pixel = 0; pixel < 16385; pixel++) lcdWriteData(colour >> 8, colour);
}

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	460b      	mov	r3, r1
 80023b8:	71bb      	strb	r3, [r7, #6]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80bb      	strh	r3, [r7, #4]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80023be:	202a      	movs	r0, #42	; 0x2a
 80023c0:	f7ff fee2 	bl	8002188 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff feef 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(x);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff feeb 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fee8 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80023d8:	207f      	movs	r0, #127	; 0x7f
 80023da:	f7ff fee5 	bl	80021a8 <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80023de:	202b      	movs	r0, #43	; 0x2b
 80023e0:	f7ff fed2 	bl	8002188 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff fedf 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(y);
 80023ea:	79bb      	ldrb	r3, [r7, #6]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fedb 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7ff fed8 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x7f);//7f
 80023f8:	207f      	movs	r0, #127	; 0x7f
 80023fa:	f7ff fed5 	bl	80021a8 <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 80023fe:	202c      	movs	r0, #44	; 0x2c
 8002400:	f7ff fec2 	bl	8002188 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8002404:	88bb      	ldrh	r3, [r7, #4]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	b29b      	uxth	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	88ba      	ldrh	r2, [r7, #4]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fed8 	bl	80021c8 <lcdWriteData>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	4604      	mov	r4, r0
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4623      	mov	r3, r4
 8002430:	80fb      	strh	r3, [r7, #6]
 8002432:	4603      	mov	r3, r0
 8002434:	80bb      	strh	r3, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	807b      	strh	r3, [r7, #2]
 800243a:	4613      	mov	r3, r2
 800243c:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 800243e:	883a      	ldrh	r2, [r7, #0]
 8002440:	88bb      	ldrh	r3, [r7, #4]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	b29b      	uxth	r3, r3
 8002450:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;

	if (dy < 0)
 8002452:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da07      	bge.n	800246a <lcdLine+0x4a>
	{
		dy = -dy; stepy = -1;
 800245a:	8afb      	ldrh	r3, [r7, #22]
 800245c:	425b      	negs	r3, r3
 800245e:	b29b      	uxth	r3, r3
 8002460:	82fb      	strh	r3, [r7, #22]
 8002462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002466:	823b      	strh	r3, [r7, #16]
 8002468:	e001      	b.n	800246e <lcdLine+0x4e>
	}
	else stepy = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	823b      	strh	r3, [r7, #16]

 	if (dx < 0)
 800246e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da07      	bge.n	8002486 <lcdLine+0x66>
	{
		dx = -dx; stepx = -1;
 8002476:	8abb      	ldrh	r3, [r7, #20]
 8002478:	425b      	negs	r3, r3
 800247a:	b29b      	uxth	r3, r3
 800247c:	82bb      	strh	r3, [r7, #20]
 800247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002482:	827b      	strh	r3, [r7, #18]
 8002484:	e001      	b.n	800248a <lcdLine+0x6a>
	}
	else stepx = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 800248a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 8002492:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	88ba      	ldrh	r2, [r7, #4]
 80024a0:	b2d1      	uxtb	r1, r2
 80024a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff81 	bl	80023ac <lcdPlot>

	if (dx > dy) {
 80024aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80024ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	dd2e      	ble.n	8002514 <lcdLine+0xf4>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 80024b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80024be:	1052      	asrs	r2, r2, #1
 80024c0:	b212      	sxth	r2, r2
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
		while (x0 != x1)
 80024c6:	e01e      	b.n	8002506 <lcdLine+0xe6>
		{
			if (fraction >= 0)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db09      	blt.n	80024e2 <lcdLine+0xc2>
			{
				y0 += stepy;
 80024ce:	88ba      	ldrh	r2, [r7, #4]
 80024d0:	8a3b      	ldrh	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 80024d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	60fb      	str	r3, [r7, #12]
			}

   			x0 += stepx;
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	8a7b      	ldrh	r3, [r7, #18]
 80024e6:	4413      	add	r3, r2
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	80fb      	strh	r3, [r7, #6]
   			fraction += dy; 				// same as fraction -= 2*dy
 80024ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
   			lcdPlot(x0, y0, colour);
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	88ba      	ldrh	r2, [r7, #4]
 80024fc:	b2d1      	uxtb	r1, r2
 80024fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff53 	bl	80023ac <lcdPlot>

	lcdPlot(x0, y0, colour);

	if (dx > dy) {
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
		while (x0 != x1)
 8002506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800250a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800250e:	429a      	cmp	r2, r3
 8002510:	d1da      	bne.n	80024c8 <lcdLine+0xa8>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8002512:	e02d      	b.n	8002570 <lcdLine+0x150>
   			lcdPlot(x0, y0, colour);
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
 8002514:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002518:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800251c:	1052      	asrs	r2, r2, #1
 800251e:	b212      	sxth	r2, r2
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
		while (y0 != y1)
 8002524:	e01e      	b.n	8002564 <lcdLine+0x144>
		{
			if (fraction >= 0)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db09      	blt.n	8002540 <lcdLine+0x120>
			{
				x0 += stepx;
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	8a7b      	ldrh	r3, [r7, #18]
 8002530:	4413      	add	r3, r2
 8002532:	b29b      	uxth	r3, r3
 8002534:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8002536:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	60bb      	str	r3, [r7, #8]
			}

			y0 += stepy;
 8002540:	88ba      	ldrh	r2, [r7, #4]
 8002542:	8a3b      	ldrh	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 800254a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4413      	add	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	88ba      	ldrh	r2, [r7, #4]
 800255a:	b2d1      	uxtb	r1, r2
 800255c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff24 	bl	80023ac <lcdPlot>
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
		while (y0 != y1)
 8002564:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002568:	f9b7 3000 	ldrsh.w	r3, [r7]
 800256c:	429a      	cmp	r2, r3
 800256e:	d1da      	bne.n	8002526 <lcdLine+0x106>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd90      	pop	{r4, r7, pc}

08002578 <lcdRectangle>:

// Draw a rectangle between x0, y0 and x1, y1
void lcdRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b085      	sub	sp, #20
 800257c:	af02      	add	r7, sp, #8
 800257e:	4604      	mov	r4, r0
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4623      	mov	r3, r4
 8002588:	80fb      	strh	r3, [r7, #6]
 800258a:	4603      	mov	r3, r0
 800258c:	80bb      	strh	r3, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	807b      	strh	r3, [r7, #2]
 8002592:	4613      	mov	r3, r2
 8002594:	803b      	strh	r3, [r7, #0]
	lcdLine(x0, y0, x0, y1, colour);
 8002596:	f9b7 4000 	ldrsh.w	r4, [r7]
 800259a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800259e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80025a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80025a6:	8b3b      	ldrh	r3, [r7, #24]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4623      	mov	r3, r4
 80025ac:	f7ff ff38 	bl	8002420 <lcdLine>
	lcdLine(x0, y1, x1, y1, colour);
 80025b0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80025b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025b8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80025bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80025c0:	8b3b      	ldrh	r3, [r7, #24]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4623      	mov	r3, r4
 80025c6:	f7ff ff2b 	bl	8002420 <lcdLine>
	lcdLine(x1, y0, x1, y1, colour);
 80025ca:	f9b7 4000 	ldrsh.w	r4, [r7]
 80025ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80025d6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80025da:	8b3b      	ldrh	r3, [r7, #24]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4623      	mov	r3, r4
 80025e0:	f7ff ff1e 	bl	8002420 <lcdLine>
	lcdLine(x0, y0, x1, y0, colour);
 80025e4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80025e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80025f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80025f4:	8b3b      	ldrh	r3, [r7, #24]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4623      	mov	r3, r4
 80025fa:	f7ff ff11 	bl	8002420 <lcdLine>
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	bf00      	nop

08002608 <lcdFilledRectangle>:

// Draw a filled rectangle
// Note:	y1 must be greater than y0  and x1 must be greater than x0
//			for this to work
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4623      	mov	r3, r4
 8002618:	80fb      	strh	r3, [r7, #6]
 800261a:	4603      	mov	r3, r0
 800261c:	80bb      	strh	r3, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]
 8002622:	4613      	mov	r3, r2
 8002624:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window with the width of the
	// rectangle and then just output the required number of bytes to
	// fill down to the end point

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002626:	202a      	movs	r0, #42	; 0x2a
 8002628:	f7ff fdae 	bl	8002188 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fdbb 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(x0);
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fdb6 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff fdb3 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(x1);
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fdae 	bl	80021a8 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 800264c:	202b      	movs	r0, #43	; 0x2b
 800264e:	f7ff fd9b 	bl	8002188 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff fda8 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(y0);
 8002658:	88bb      	ldrh	r3, [r7, #4]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fda3 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff fda0 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(y1);
 8002668:	883b      	ldrh	r3, [r7, #0]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fd9b 	bl	80021a8 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8002672:	202c      	movs	r0, #44	; 0x2c
 8002674:	f7ff fd88 	bl	8002188 <lcdWriteCommand>

	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 8002678:	2300      	movs	r3, #0
 800267a:	81fb      	strh	r3, [r7, #14]
 800267c:	e00c      	b.n	8002698 <lcdFilledRectangle+0x90>
		lcdWriteData(colour >> 8, colour);;
 800267e:	8c3b      	ldrh	r3, [r7, #32]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	b29b      	uxth	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	8c3a      	ldrh	r2, [r7, #32]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fd9b 	bl	80021c8 <lcdWriteData>
	lcdWriteParameter(0x00);
	lcdWriteParameter(y1);

	lcdWriteCommand(WRITE_MEMORY_START);

	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 8002692:	89fb      	ldrh	r3, [r7, #14]
 8002694:	3301      	adds	r3, #1
 8002696:	81fb      	strh	r3, [r7, #14]
 8002698:	89fa      	ldrh	r2, [r7, #14]
 800269a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800269e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a2:	1acb      	subs	r3, r1, r3
 80026a4:	f9b7 0000 	ldrsh.w	r0, [r7]
 80026a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026ac:	1a41      	subs	r1, r0, r1
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbe3      	blt.n	800267e <lcdFilledRectangle+0x76>
		lcdWriteData(colour >> 8, colour);;
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	bf00      	nop

080026c0 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	4603      	mov	r3, r0
 80026d4:	71bb      	strb	r3, [r7, #6]
 80026d6:	460b      	mov	r3, r1
 80026d8:	717b      	strb	r3, [r7, #5]
 80026da:	4613      	mov	r3, r2
 80026dc:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 80026de:	202a      	movs	r0, #42	; 0x2a
 80026e0:	f7ff fd52 	bl	8002188 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff fd5f 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(x);
 80026ea:	79bb      	ldrb	r3, [r7, #6]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fd5b 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7ff fd58 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	3305      	adds	r3, #5
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fd52 	bl	80021a8 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002704:	202b      	movs	r0, #43	; 0x2b
 8002706:	f7ff fd3f 	bl	8002188 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800270a:	2000      	movs	r0, #0
 800270c:	f7ff fd4c 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(y);
 8002710:	797b      	ldrb	r3, [r7, #5]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fd48 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fd45 	bl	80021a8 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 800271e:	207f      	movs	r0, #127	; 0x7f
 8002720:	f7ff fd42 	bl	80021a8 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8002724:	202c      	movs	r0, #44	; 0x2c
 8002726:	f7ff fd2f 	bl	8002188 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	e032      	b.n	8002796 <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 8002730:	2300      	movs	r3, #0
 8002732:	73bb      	strb	r3, [r7, #14]
 8002734:	e029      	b.n	800278a <lcdPutCh+0xca>
		{
			if ((font5x8[character][column]) & (1 << row))
 8002736:	79fa      	ldrb	r2, [r7, #7]
 8002738:	7bb9      	ldrb	r1, [r7, #14]
 800273a:	481a      	ldr	r0, [pc, #104]	; (80027a4 <lcdPutCh+0xe4>)
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4403      	add	r3, r0
 8002746:	440b      	add	r3, r1
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	fa42 f303 	asr.w	r3, r2, r3
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	b29b      	uxth	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fd2d 	bl	80021c8 <lcdWriteData>
 800276e:	e009      	b.n	8002784 <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 8002770:	8c3b      	ldrh	r3, [r7, #32]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b29b      	uxth	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	8c3a      	ldrh	r2, [r7, #32]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fd22 	bl	80021c8 <lcdWriteData>
	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
	{
		for (column = 0; column < 6; column++)
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	3301      	adds	r3, #1
 8002788:	73bb      	strb	r3, [r7, #14]
 800278a:	7bbb      	ldrb	r3, [r7, #14]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d9d2      	bls.n	8002736 <lcdPutCh+0x76>
	lcdWriteParameter(0x7f);

	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b07      	cmp	r3, #7
 800279a:	d9c9      	bls.n	8002730 <lcdPutCh+0x70>
			if ((font5x8[character][column]) & (1 << row))
				lcdWriteData(fgColour>>8, fgColour);
			else lcdWriteData(bgColour >> 8, bgColour);
		}
	}
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd90      	pop	{r4, r7, pc}
 80027a4:	08003284 	.word	0x08003284

080027a8 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	460b      	mov	r3, r1
 80027b4:	71bb      	strb	r3, [r7, #6]
 80027b6:	4613      	mov	r3, r2
 80027b8:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 80027ba:	797b      	ldrb	r3, [r7, #5]
 80027bc:	02db      	lsls	r3, r3, #11
 80027be:	b21a      	sxth	r2, r3
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	019b      	lsls	r3, r3, #6
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	b29b      	uxth	r3, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop

080027e0 <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) { return x*6; }
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	461a      	mov	r2, r3
 80027ee:	0052      	lsls	r2, r2, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b087      	sub	sp, #28
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	70fb      	strb	r3, [r7, #3]
 800282e:	460b      	mov	r3, r1
 8002830:	70bb      	strb	r3, [r7, #2]
 8002832:	4613      	mov	r3, r2
 8002834:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e01c      	b.n	800287a <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	2b79      	cmp	r3, #121	; 0x79
 8002844:	d904      	bls.n	8002850 <lcdPutS+0x34>
		{
			x = origin;
 8002846:	7bbb      	ldrb	r3, [r7, #14]
 8002848:	70fb      	strb	r3, [r7, #3]
			y += 8;
 800284a:	78bb      	ldrb	r3, [r7, #2]
 800284c:	3308      	adds	r3, #8
 800284e:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8002850:	78bb      	ldrb	r3, [r7, #2]
 8002852:	2b78      	cmp	r3, #120	; 0x78
 8002854:	d819      	bhi.n	800288a <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	7818      	ldrb	r0, [r3, #0]
 800285e:	883c      	ldrh	r4, [r7, #0]
 8002860:	78ba      	ldrb	r2, [r7, #2]
 8002862:	78f9      	ldrb	r1, [r7, #3]
 8002864:	8c3b      	ldrh	r3, [r7, #32]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4623      	mov	r3, r4
 800286a:	f7ff ff29 	bl	80026c0 <lcdPutCh>
		x += 6;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	3306      	adds	r3, #6
 8002872:	70fb      	strb	r3, [r7, #3]
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
	uint8_t origin = x;
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	3301      	adds	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	7bfc      	ldrb	r4, [r7, #15]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fd fc7d 	bl	800017c <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	429c      	cmp	r4, r3
 8002886:	d3db      	bcc.n	8002840 <lcdPutS+0x24>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 8002888:	e000      	b.n	800288c <lcdPutS+0x70>
			x = origin;
			y += 8;
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 800288a:	bf00      	nop

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <DMA1_Channel7_IRQHandler>:


volatile int16_t data[14], test;

// prerusenie od MPU6050 pre DMA pristup
void DMA1_Channel7_IRQHandler(void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	// ak nastalo prerusenie
	if (DMA_GetFlagStatus(DMA1_FLAG_TC7)) {
 8002898:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800289c:	f7fe fa08 	bl	8000cb0 <DMA_GetFlagStatus>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06c      	beq.n	8002980 <DMA1_Channel7_IRQHandler+0xec>
		// vynulujeme vlajku prerusenia
		DMA_ClearFlag(DMA1_FLAG_TC7);
 80028a6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80028aa:	f7fe fa29 	bl	8000d00 <DMA_ClearFlag>
		// vypneme DMA prenos
		I2C_DMACmd(I2C1, DISABLE);
 80028ae:	2100      	movs	r1, #0
 80028b0:	4834      	ldr	r0, [pc, #208]	; (8002984 <DMA1_Channel7_IRQHandler+0xf0>)
 80028b2:	f7fe fc91 	bl	80011d8 <I2C_DMACmd>
		// vygenerujeme koniec prenosu
		I2C_GenerateSTOP(I2C1, ENABLE);
 80028b6:	2101      	movs	r1, #1
 80028b8:	4832      	ldr	r0, [pc, #200]	; (8002984 <DMA1_Channel7_IRQHandler+0xf0>)
 80028ba:	f7fe fc3f 	bl	800113c <I2C_GenerateSTOP>
		// vypneme DMA kanal
		DMA_Cmd(DMA1_Channel7, DISABLE);
 80028be:	2100      	movs	r1, #0
 80028c0:	4831      	ldr	r0, [pc, #196]	; (8002988 <DMA1_Channel7_IRQHandler+0xf4>)
 80028c2:	f7fe f9ad 	bl	8000c20 <DMA_Cmd>

		if(I2C1_getReadRegister() == MPU6050_WHO_AM_I) {
 80028c6:	f7ff f815 	bl	80018f4 <I2C1_getReadRegister>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b75      	cmp	r3, #117	; 0x75
 80028ce:	d106      	bne.n	80028de <DMA1_Channel7_IRQHandler+0x4a>
			test = (int16_t) I2C1_getRxBuffer(0);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe ffff 	bl	80018d4 <I2C1_getRxBuffer>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b21a      	sxth	r2, r3
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <DMA1_Channel7_IRQHandler+0xf8>)
 80028dc:	801a      	strh	r2, [r3, #0]
		}
		// nacitame data do struktury
		if(I2C1_getReadRegister() == MPU6050_ACCEL_XOUT_H){
 80028de:	f7ff f809 	bl	80018f4 <I2C1_getReadRegister>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b3b      	cmp	r3, #59	; 0x3b
 80028e6:	d107      	bne.n	80028f8 <DMA1_Channel7_IRQHandler+0x64>
			data[0] = (int16_t) I2C1_getRxBuffer(0);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fe fff3 	bl	80018d4 <I2C1_getRxBuffer>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <DMA1_Channel7_IRQHandler+0xfc>)
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	e03f      	b.n	8002978 <DMA1_Channel7_IRQHandler+0xe4>
		}
		else if(I2C1_getReadRegister() == MPU6050_ACCEL_XOUT_L){
 80028f8:	f7fe fffc 	bl	80018f4 <I2C1_getReadRegister>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b3c      	cmp	r3, #60	; 0x3c
 8002900:	d107      	bne.n	8002912 <DMA1_Channel7_IRQHandler+0x7e>
			data[1] = (int16_t) I2C1_getRxBuffer(0);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe ffe6 	bl	80018d4 <I2C1_getRxBuffer>
 8002908:	4603      	mov	r3, r0
 800290a:	b21a      	sxth	r2, r3
 800290c:	4b20      	ldr	r3, [pc, #128]	; (8002990 <DMA1_Channel7_IRQHandler+0xfc>)
 800290e:	805a      	strh	r2, [r3, #2]
 8002910:	e032      	b.n	8002978 <DMA1_Channel7_IRQHandler+0xe4>
		}
		else if(I2C1_getReadRegister() == MPU6050_ACCEL_YOUT_H){
 8002912:	f7fe ffef 	bl	80018f4 <I2C1_getReadRegister>
 8002916:	4603      	mov	r3, r0
 8002918:	2b3d      	cmp	r3, #61	; 0x3d
 800291a:	d107      	bne.n	800292c <DMA1_Channel7_IRQHandler+0x98>
			data[2] = (int16_t) I2C1_getRxBuffer(0);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe ffd9 	bl	80018d4 <I2C1_getRxBuffer>
 8002922:	4603      	mov	r3, r0
 8002924:	b21a      	sxth	r2, r3
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <DMA1_Channel7_IRQHandler+0xfc>)
 8002928:	809a      	strh	r2, [r3, #4]
 800292a:	e025      	b.n	8002978 <DMA1_Channel7_IRQHandler+0xe4>
		}
		else if(I2C1_getReadRegister() == MPU6050_ACCEL_YOUT_L){
 800292c:	f7fe ffe2 	bl	80018f4 <I2C1_getReadRegister>
 8002930:	4603      	mov	r3, r0
 8002932:	2b3e      	cmp	r3, #62	; 0x3e
 8002934:	d107      	bne.n	8002946 <DMA1_Channel7_IRQHandler+0xb2>
			data[3] = (int16_t) I2C1_getRxBuffer(0);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe ffcc 	bl	80018d4 <I2C1_getRxBuffer>
 800293c:	4603      	mov	r3, r0
 800293e:	b21a      	sxth	r2, r3
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <DMA1_Channel7_IRQHandler+0xfc>)
 8002942:	80da      	strh	r2, [r3, #6]
 8002944:	e018      	b.n	8002978 <DMA1_Channel7_IRQHandler+0xe4>
		}
		else if(I2C1_getReadRegister() == MPU6050_ACCEL_ZOUT_H){
 8002946:	f7fe ffd5 	bl	80018f4 <I2C1_getReadRegister>
 800294a:	4603      	mov	r3, r0
 800294c:	2b3f      	cmp	r3, #63	; 0x3f
 800294e:	d107      	bne.n	8002960 <DMA1_Channel7_IRQHandler+0xcc>
			data[4] = (int16_t) I2C1_getRxBuffer(0);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe ffbf 	bl	80018d4 <I2C1_getRxBuffer>
 8002956:	4603      	mov	r3, r0
 8002958:	b21a      	sxth	r2, r3
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <DMA1_Channel7_IRQHandler+0xfc>)
 800295c:	811a      	strh	r2, [r3, #8]
 800295e:	e00b      	b.n	8002978 <DMA1_Channel7_IRQHandler+0xe4>
		}
		else if(I2C1_getReadRegister() == MPU6050_ACCEL_ZOUT_L){
 8002960:	f7fe ffc8 	bl	80018f4 <I2C1_getReadRegister>
 8002964:	4603      	mov	r3, r0
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d106      	bne.n	8002978 <DMA1_Channel7_IRQHandler+0xe4>
			data[5] = (int16_t) I2C1_getRxBuffer(0);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe ffb2 	bl	80018d4 <I2C1_getRxBuffer>
 8002970:	4603      	mov	r3, r0
 8002972:	b21a      	sxth	r2, r3
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <DMA1_Channel7_IRQHandler+0xfc>)
 8002976:	815a      	strh	r2, [r3, #10]
		}

		I2C1_clearReadRegister();
 8002978:	f7fe ffc6 	bl	8001908 <I2C1_clearReadRegister>
		I2C1_clearDeviceAddress();
 800297c:	f7fe ff9e 	bl	80018bc <I2C1_clearDeviceAddress>
	}
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40005400 	.word	0x40005400
 8002988:	40026080 	.word	0x40026080
 800298c:	20000074 	.word	0x20000074
 8002990:	20000078 	.word	0x20000078

08002994 <main>:


int main(void){
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b08d      	sub	sp, #52	; 0x34
 8002998:	af02      	add	r7, sp, #8
	uint16_t biela = decodeRgbValue(31, 31, 31);
 800299a:	221f      	movs	r2, #31
 800299c:	211f      	movs	r1, #31
 800299e:	201f      	movs	r0, #31
 80029a0:	f7ff ff02 	bl	80027a8 <decodeRgbValue>
 80029a4:	4603      	mov	r3, r0
 80029a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t cierna = decodeRgbValue(0, 0, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff fefb 	bl	80027a8 <decodeRgbValue>
 80029b2:	4603      	mov	r3, r0
 80029b4:	84bb      	strh	r3, [r7, #36]	; 0x24
	//uint16_t cervena = decodeRgbValue(31, 0, 0);
	uint16_t zelena = decodeRgbValue(0, 31, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	211f      	movs	r1, #31
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7ff fef4 	bl	80027a8 <decodeRgbValue>
 80029c0:	4603      	mov	r3, r0
 80029c2:	847b      	strh	r3, [r7, #34]	; 0x22
	//uint16_t modra = decodeRgbValue(0, 0, 31);
	char error = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	MPU6050_t MPU6050_Data;

	// inicializacne funkcie
	initSPI2();
 80029ca:	f000 f9e3 	bl	8002d94 <initSPI2>
	initCD_Pin();
 80029ce:	f000 fa73 	bl	8002eb8 <initCD_Pin>
	initCS_Pin();
 80029d2:	f000 fa53 	bl	8002e7c <initCS_Pin>
	initRES_Pin();
 80029d6:	f000 faa5 	bl	8002f24 <initRES_Pin>
	initButton();
 80029da:	f7fe ffe9 	bl	80019b0 <initButton>
	initADC();
 80029de:	f7ff f803 	bl	80019e8 <initADC>
	//initUSART2();
	initI2C1();
 80029e2:	f7ff f843 	bl	8001a6c <initI2C1>
	error = initMPU6050(&MPU6050_Data,MPU6050_Zariadenie_0,MPU6050_Akcelerometer_2G,MPU6050_Gyroskop_250s);
 80029e6:	1d38      	adds	r0, r7, #4
 80029e8:	2300      	movs	r3, #0
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	f000 f907 	bl	8002c00 <initMPU6050>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(error!=0){
 80029f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <main+0x72>
		return error;
 8002a00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002a04:	e065      	b.n	8002ad2 <main+0x13e>
	}
	lcdInitialise(LCD_ORIENTATION0);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff fbf4 	bl	80021f4 <lcdInitialise>
	clearDisplay(cierna);
 8002a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fa04 	bl	8001e1c <clearDisplay>
	lcdMriezka3x3(54, 93, 6, biela, cierna);
 8002a14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	2206      	movs	r2, #6
 8002a1e:	215d      	movs	r1, #93	; 0x5d
 8002a20:	2036      	movs	r0, #54	; 0x36
 8002a22:	f7ff faf3 	bl	800200c <lcdMriezka3x3>

	//hod kockou na zaklade akcelerometra
	lcdPutS("Nahodny generator", lcdTextX(1), lcdTextY(9), biela, cierna);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7ff feda 	bl	80027e0 <lcdTextX>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461c      	mov	r4, r3
 8002a30:	2009      	movs	r0, #9
 8002a32:	f7ff fee5 	bl	8002800 <lcdTextY>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4619      	mov	r1, r3
 8002a3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	460a      	mov	r2, r1
 8002a44:	4621      	mov	r1, r4
 8002a46:	4825      	ldr	r0, [pc, #148]	; (8002adc <main+0x148>)
 8002a48:	f7ff fee8 	bl	800281c <lcdPutS>
	lcdRectangle(45, 85, 83, 122, biela);
 8002a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	237a      	movs	r3, #122	; 0x7a
 8002a52:	2253      	movs	r2, #83	; 0x53
 8002a54:	2155      	movs	r1, #85	; 0x55
 8002a56:	202d      	movs	r0, #45	; 0x2d
 8002a58:	f7ff fd8e 	bl	8002578 <lcdRectangle>

	//nahodny generator
	lcdPutS("Elektronicka hracia kocka", lcdTextX(1), lcdTextY(1), biela, cierna);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff febf 	bl	80027e0 <lcdTextX>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461c      	mov	r4, r3
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff feca 	bl	8002800 <lcdTextY>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	460a      	mov	r2, r1
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	4818      	ldr	r0, [pc, #96]	; (8002ae0 <main+0x14c>)
 8002a7e:	f7ff fecd 	bl	800281c <lcdPutS>
	lcdRectangle(45, 23, 83, 60, biela);
 8002a82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	233c      	movs	r3, #60	; 0x3c
 8002a88:	2253      	movs	r2, #83	; 0x53
 8002a8a:	2117      	movs	r1, #23
 8002a8c:	202d      	movs	r0, #45	; 0x2d
 8002a8e:	f7ff fd73 	bl	8002578 <lcdRectangle>

	while(1){
		MPU6050_readAcc((int16_t*)&data, &MPU6050_Data);
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4813      	ldr	r0, [pc, #76]	; (8002ae4 <main+0x150>)
 8002a98:	f000 f862 	bl	8002b60 <MPU6050_readAcc>
		// mriezka pre stvorceky
		// lcdMriezka3x3(51, 28, 1, biela, cierna);
		// mriezka pre elektronicku kocku
		lcdMriezka3x3(54, 31, diceSide(&MPU6050_Data), biela, cierna);
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f92c 	bl	8001cfc <diceSide>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	211f      	movs	r1, #31
 8002ab2:	2036      	movs	r0, #54	; 0x36
 8002ab4:	f7ff faaa 	bl	800200c <lcdMriezka3x3>
		// mriezka pre nahodny generator
		lcdMriezka3x3(54, 93, getTrueRandomNumber(), zelena, cierna);
 8002ab8:	f7fe ff32 	bl	8001920 <getTrueRandomNumber>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	215d      	movs	r1, #93	; 0x5d
 8002aca:	2036      	movs	r0, #54	; 0x36
 8002acc:	f7ff fa9e 	bl	800200c <lcdMriezka3x3>
	}
 8002ad0:	e7df      	b.n	8002a92 <main+0xfe>
	return 0;
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	372c      	adds	r7, #44	; 0x2c
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd90      	pop	{r4, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	08003254 	.word	0x08003254
 8002ae0:	08003268 	.word	0x08003268
 8002ae4:	20000078 	.word	0x20000078

08002ae8 <TIM7_IRQHandler>:
static uint16_t backlitModulo = 0;
static uint16_t shimmerModulo = 0;
static uint16_t shimmerDutyCycle = SHIMMER_DUTY_CYCLE;

void TIM7_IRQHandler(void)
{
 8002ae8:	b598      	push	{r3, r4, r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) == SET)
 8002aec:	2101      	movs	r1, #1
 8002aee:	4817      	ldr	r0, [pc, #92]	; (8002b4c <TIM7_IRQHandler+0x64>)
 8002af0:	f7fe fe62 	bl	80017b8 <TIM_GetITStatus>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d126      	bne.n	8002b48 <TIM7_IRQHandler+0x60>
	{
		backlitTimer++;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <TIM7_IRQHandler+0x68>)
 8002afc:	cb18      	ldmia	r3, {r3, r4}
 8002afe:	3301      	adds	r3, #1
 8002b00:	f144 0400 	adc.w	r4, r4, #0
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <TIM7_IRQHandler+0x68>)
 8002b06:	e882 0018 	stmia.w	r2, {r3, r4}

		shimmerModulo = backlitTimer % SHIMMER_PERIOD;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <TIM7_IRQHandler+0x68>)
 8002b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b10:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	f7fd fb38 	bl	800018c <__aeabi_uldivmod>
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <TIM7_IRQHandler+0x6c>)
 8002b24:	801a      	strh	r2, [r3, #0]

		if(shimmerDutyCycle < shimmerModulo)
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <TIM7_IRQHandler+0x70>)
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <TIM7_IRQHandler+0x6c>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d203      	bcs.n	8002b3a <TIM7_IRQHandler+0x52>
		{
			gShimmerFlag = 0;
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <TIM7_IRQHandler+0x74>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e002      	b.n	8002b40 <TIM7_IRQHandler+0x58>
		}
		else
		{
			gShimmerFlag = 1;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <TIM7_IRQHandler+0x74>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
				GPIOB->BSRRH = GPIO_Pin_0;
				GPIOA->BSRRH = GPIO_Pin_7;
			}
		}*/

		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8002b40:	2101      	movs	r1, #1
 8002b42:	4802      	ldr	r0, [pc, #8]	; (8002b4c <TIM7_IRQHandler+0x64>)
 8002b44:	f7fe fe62 	bl	800180c <TIM_ClearITPendingBit>
	}
}
 8002b48:	bf00      	nop
 8002b4a:	bd98      	pop	{r3, r4, r7, pc}
 8002b4c:	40001400 	.word	0x40001400
 8002b50:	20000040 	.word	0x20000040
 8002b54:	20000048 	.word	0x20000048
 8002b58:	2000001c 	.word	0x2000001c
 8002b5c:	2000003e 	.word	0x2000003e

08002b60 <MPU6050_readAcc>:
#include "ssd1306.h"
#include "elkocka.h"


// nacitame hodnoty akcelerometra
void MPU6050_readAcc(int16_t* data, MPU6050_t* Sensor){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]

	// nacitame registre
	I2C1_DMA_Read(MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, 1);
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	213b      	movs	r1, #59	; 0x3b
 8002b6e:	20d0      	movs	r0, #208	; 0xd0
 8002b70:	f7ff f838 	bl	8001be4 <I2C1_DMA_Read>
	I2C1_DMA_Read(MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_L, 1);
 8002b74:	2201      	movs	r2, #1
 8002b76:	213c      	movs	r1, #60	; 0x3c
 8002b78:	20d0      	movs	r0, #208	; 0xd0
 8002b7a:	f7ff f833 	bl	8001be4 <I2C1_DMA_Read>
	I2C1_DMA_Read(MPU6050_I2C_ADDR, MPU6050_ACCEL_YOUT_H, 1);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	213d      	movs	r1, #61	; 0x3d
 8002b82:	20d0      	movs	r0, #208	; 0xd0
 8002b84:	f7ff f82e 	bl	8001be4 <I2C1_DMA_Read>
	I2C1_DMA_Read(MPU6050_I2C_ADDR, MPU6050_ACCEL_YOUT_L, 1);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	213e      	movs	r1, #62	; 0x3e
 8002b8c:	20d0      	movs	r0, #208	; 0xd0
 8002b8e:	f7ff f829 	bl	8001be4 <I2C1_DMA_Read>
	I2C1_DMA_Read(MPU6050_I2C_ADDR, MPU6050_ACCEL_ZOUT_H, 1);
 8002b92:	2201      	movs	r2, #1
 8002b94:	213f      	movs	r1, #63	; 0x3f
 8002b96:	20d0      	movs	r0, #208	; 0xd0
 8002b98:	f7ff f824 	bl	8001be4 <I2C1_DMA_Read>
	I2C1_DMA_Read(MPU6050_I2C_ADDR, MPU6050_ACCEL_ZOUT_L, 1);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2140      	movs	r1, #64	; 0x40
 8002ba0:	20d0      	movs	r0, #208	; 0xd0
 8002ba2:	f7ff f81f 	bl	8001be4 <I2C1_DMA_Read>

	// prepocet z registrov
	Sensor->Akcelerometer_X = (int16_t) (data[0] << 8 | data[1]);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b21a      	sxth	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	819a      	strh	r2, [r3, #12]
	Sensor->Akcelerometer_Y = (int16_t) (data[2] << 8 | data[3]);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3306      	adds	r3, #6
 8002bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b21a      	sxth	r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	81da      	strh	r2, [r3, #14]
	Sensor->Akcelerometer_Z = (int16_t) (data[4] << 8 | data[5]);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3308      	adds	r3, #8
 8002be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	330a      	adds	r3, #10
 8002bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	821a      	strh	r2, [r3, #16]

}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <initMPU6050>:


char initMPU6050(MPU6050_t* Data, MPU6050_Zariadenie_t DeviceNumber, MPU6050_Akcelerometer_t citlivostA, MPU6050_Gyroskop_t citlivostG){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	70fb      	strb	r3, [r7, #3]
 8002c12:	460b      	mov	r3, r1
 8002c14:	70bb      	strb	r3, [r7, #2]
 8002c16:	4613      	mov	r3, r2
 8002c18:	707b      	strb	r3, [r7, #1]
	uint8_t temp, buff = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	737b      	strb	r3, [r7, #13]
	char error = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]

	// vypocitaj I2C adresu na zaklade cisla zariadenia
	Data->Adresa = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	701a      	strb	r2, [r3, #0]

	// skontrolujeme, ci komunikujeme spravne
	I2C1_DMA_Read(Data->Adresa, MPU6050_WHO_AM_I, 1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	2175      	movs	r1, #117	; 0x75
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe ffd4 	bl	8001be4 <I2C1_DMA_Read>
	Delay(50);
 8002c3c:	2032      	movs	r0, #50	; 0x32
 8002c3e:	f000 f9a7 	bl	8002f90 <Delay>
	temp = (uint8_t)I2C1_getRxBuffer(0);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fe fe46 	bl	80018d4 <I2C1_getRxBuffer>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	73bb      	strb	r3, [r7, #14]
	if(temp!=(uint8_t)MPU6050_I_AM){
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	2b68      	cmp	r3, #104	; 0x68
 8002c52:	d001      	beq.n	8002c58 <initMPU6050+0x58>
		return 1;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e090      	b.n	8002d7a <initMPU6050+0x17a>
	}

	// zobudime zo sleep rezimu
	I2C1_BytesWrite(Data->Adresa, &buff, 1, MPU6050_PWR_MGMT_1);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7818      	ldrb	r0, [r3, #0]
 8002c5c:	f107 010d 	add.w	r1, r7, #13
 8002c60:	236b      	movs	r3, #107	; 0x6b
 8002c62:	2201      	movs	r2, #1
 8002c64:	f7fe ff50 	bl	8001b08 <I2C1_BytesWrite>

	// konfiguracia akcelerometra
	I2C1_DMA_Read(Data->Adresa, MPU6050_ACCEL_CONFIG, 1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	211c      	movs	r1, #28
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ffb7 	bl	8001be4 <I2C1_DMA_Read>
	Delay(50);
 8002c76:	2032      	movs	r0, #50	; 0x32
 8002c78:	f000 f98a 	bl	8002f90 <Delay>
	temp = (uint8_t)I2C1_getRxBuffer(0);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fe fe29 	bl	80018d4 <I2C1_getRxBuffer>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	73bb      	strb	r3, [r7, #14]
	// nastavime zvolenu citlivost akcelerometra
	temp = (temp & 0xE7) | (uint8_t)citlivostA << 3;
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	f023 0318 	bic.w	r3, r3, #24
 8002c90:	b25a      	sxtb	r2, r3
 8002c92:	78bb      	ldrb	r3, [r7, #2]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b25b      	sxtb	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	73bb      	strb	r3, [r7, #14]
	I2C1_BytesWrite(Data->Adresa, &temp, 1, MPU6050_ACCEL_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7818      	ldrb	r0, [r3, #0]
 8002ca4:	f107 010e 	add.w	r1, r7, #14
 8002ca8:	231c      	movs	r3, #28
 8002caa:	2201      	movs	r2, #1
 8002cac:	f7fe ff2c 	bl	8001b08 <I2C1_BytesWrite>

	// konfiguracia gyroskopu
	I2C1_DMA_Read(Data->Adresa, MPU6050_GYRO_CONFIG, 1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	211b      	movs	r1, #27
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ff93 	bl	8001be4 <I2C1_DMA_Read>
	Delay(50);
 8002cbe:	2032      	movs	r0, #50	; 0x32
 8002cc0:	f000 f966 	bl	8002f90 <Delay>
	temp = (uint8_t)I2C1_getRxBuffer(0);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fe fe05 	bl	80018d4 <I2C1_getRxBuffer>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	73bb      	strb	r3, [r7, #14]
	// nastavime zvolenu citlivost gyroskopu
	temp = (temp & 0xE7) | (uint8_t)citlivostG << 3;
 8002cd0:	7bbb      	ldrb	r3, [r7, #14]
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	f023 0318 	bic.w	r3, r3, #24
 8002cd8:	b25a      	sxtb	r2, r3
 8002cda:	787b      	ldrb	r3, [r7, #1]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	73bb      	strb	r3, [r7, #14]
	I2C1_BytesWrite(Data->Adresa, &temp, 1, MPU6050_GYRO_CONFIG);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7818      	ldrb	r0, [r3, #0]
 8002cec:	f107 010e 	add.w	r1, r7, #14
 8002cf0:	231b      	movs	r3, #27
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f7fe ff08 	bl	8001b08 <I2C1_BytesWrite>

	// nastavime multiplikatory na prepocet jednotiek na zaklade zvolenej citlivosti pre akcelerometer
	switch (citlivostA) {
 8002cf8:	78bb      	ldrb	r3, [r7, #2]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d81d      	bhi.n	8002d3a <initMPU6050+0x13a>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <initMPU6050+0x104>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002d1f 	.word	0x08002d1f
 8002d0c:	08002d29 	.word	0x08002d29
 8002d10:	08002d33 	.word	0x08002d33
		case MPU6050_Akcelerometer_2G:
			Data->Akce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002d1a:	609a      	str	r2, [r3, #8]
			break;
 8002d1c:	e00e      	b.n	8002d3c <initMPU6050+0x13c>
		case MPU6050_Akcelerometer_4G:
			Data->Akce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002d24:	609a      	str	r2, [r3, #8]
			break;
 8002d26:	e009      	b.n	8002d3c <initMPU6050+0x13c>
		case MPU6050_Akcelerometer_8G:
			Data->Akce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002d2e:	609a      	str	r2, [r3, #8]
			break;
 8002d30:	e004      	b.n	8002d3c <initMPU6050+0x13c>
		case MPU6050_Akcelerometer_16G:
			Data->Akce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002d38:	609a      	str	r2, [r3, #8]
		default:
			break;
 8002d3a:	bf00      	nop
	}

	// nastavime multiplikatory na prepocet jednotiek na zaklade zvolenej citlivosti pre gyroskop
	switch (citlivostG) {
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d819      	bhi.n	8002d76 <initMPU6050+0x176>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <initMPU6050+0x148>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d61 	.word	0x08002d61
 8002d50:	08002d69 	.word	0x08002d69
 8002d54:	08002d71 	.word	0x08002d71
		case MPU6050_Gyroskop_250s:
			Data->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <initMPU6050+0x184>)
 8002d5c:	605a      	str	r2, [r3, #4]
			break;
 8002d5e:	e00b      	b.n	8002d78 <initMPU6050+0x178>
		case MPU6050_Gyroskop_500s:
			Data->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <initMPU6050+0x188>)
 8002d64:	605a      	str	r2, [r3, #4]
			break;
 8002d66:	e007      	b.n	8002d78 <initMPU6050+0x178>
		case MPU6050_Gyroskop_1000s:
			Data->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <initMPU6050+0x18c>)
 8002d6c:	605a      	str	r2, [r3, #4]
			break;
 8002d6e:	e003      	b.n	8002d78 <initMPU6050+0x178>
		case MPU6050_Gyroskop_2000s:
			Data->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <initMPU6050+0x190>)
 8002d74:	605a      	str	r2, [r3, #4]
		default:
			break;
 8002d76:	bf00      	nop
	temp = 1<<0;
	// prerusenie nastane, ked su data pripravene na citanie
	I2C1_BytesWrite(MPU6050_I2C_ADDR,&temp,1,MPU6050_INT_ENABLE);
	*/
	// ak je vsetko v poriadku
	return error;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	3bfa232d 	.word	0x3bfa232d
 8002d88:	3c7a232d 	.word	0x3c7a232d
 8002d8c:	3cf9c190 	.word	0x3cf9c190
 8002d90:	3d79c190 	.word	0x3d79c190

08002d94 <initSPI2>:
#include "mcu.h"

//TODO rework to STM32L mcu's

void initSPI2(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002da0:	f7fe fbe0 	bl	8001564 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002da4:	2101      	movs	r1, #1
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fe fbbe 	bl	8001528 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002dac:	2302      	movs	r3, #2
 8002dae:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002db0:	2300      	movs	r3, #0
 8002db2:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002db4:	2303      	movs	r3, #3
 8002db6:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	77fb      	strb	r3, [r7, #31]

	//PB3 - SPI2_SCK
	//PB4 - SPI2_MISO
	//PB5 - SPI2_MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
 8002dbc:	2338      	movs	r3, #56	; 0x38
 8002dbe:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002dc0:	f107 0318 	add.w	r3, r7, #24
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4819      	ldr	r0, [pc, #100]	; (8002e2c <initSPI2+0x98>)
 8002dc8:	f7fd ffb4 	bl	8000d34 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
 8002dcc:	2205      	movs	r2, #5
 8002dce:	2103      	movs	r1, #3
 8002dd0:	4816      	ldr	r0, [pc, #88]	; (8002e2c <initSPI2+0x98>)
 8002dd2:	f7fe f845 	bl	8000e60 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
 8002dd6:	2205      	movs	r2, #5
 8002dd8:	2104      	movs	r1, #4
 8002dda:	4814      	ldr	r0, [pc, #80]	; (8002e2c <initSPI2+0x98>)
 8002ddc:	f7fe f840 	bl	8000e60 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);
 8002de0:	2205      	movs	r2, #5
 8002de2:	2105      	movs	r1, #5
 8002de4:	4811      	ldr	r0, [pc, #68]	; (8002e2c <initSPI2+0x98>)
 8002de6:	f7fe f83b 	bl	8000e60 <GPIO_PinAFConfig>

	SPI_InitTypeDef  SPI_InitStructure;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002dea:	2300      	movs	r3, #0
 8002dec:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8002dee:	2300      	movs	r3, #0
 8002df0:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002df2:	2300      	movs	r3, #0
 8002df4:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 8002df6:	2301      	movs	r3, #1
 8002df8:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002e02:	2300      	movs	r3, #0
 8002e04:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002e06:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002e0a:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e10:	81fb      	strh	r3, [r7, #14]

	/* Apply SPI configuration after enabling it */
	SPI_Init(SPI1, &SPI_InitStructure);
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4806      	ldr	r0, [pc, #24]	; (8002e30 <initSPI2+0x9c>)
 8002e18:	f7fe fc4e 	bl	80016b8 <SPI_Init>
	/* SPI Peripheral Enable */
	SPI_Cmd(SPI1, ENABLE);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4804      	ldr	r0, [pc, #16]	; (8002e30 <initSPI2+0x9c>)
 8002e20:	f7fe fc8e 	bl	8001740 <SPI_Cmd>
}
 8002e24:	bf00      	nop
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40013000 	.word	0x40013000

08002e34 <readWriteSPI2>:

unsigned char readWriteSPI2(unsigned char txData)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	SPI1->DR = txData;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <readWriteSPI2+0x44>)
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	b292      	uxth	r2, r2
 8002e44:	819a      	strh	r2, [r3, #12]
	// wait until TXE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 8002e46:	bf00      	nop
 8002e48:	2102      	movs	r1, #2
 8002e4a:	480b      	ldr	r0, [pc, #44]	; (8002e78 <readWriteSPI2+0x44>)
 8002e4c:	f7fe fc98 	bl	8001780 <SPI_I2S_GetFlagStatus>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d1f8      	bne.n	8002e48 <readWriteSPI2+0x14>
	// wait until RXNE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 8002e56:	bf00      	nop
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4807      	ldr	r0, [pc, #28]	; (8002e78 <readWriteSPI2+0x44>)
 8002e5c:	f7fe fc90 	bl	8001780 <SPI_I2S_GetFlagStatus>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d1f8      	bne.n	8002e58 <readWriteSPI2+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = SPI1->DR;
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <readWriteSPI2+0x44>)
 8002e68:	899b      	ldrh	r3, [r3, #12]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013000 	.word	0x40013000

08002e7c <initCS_Pin>:

void initCS_Pin(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002e82:	2101      	movs	r1, #1
 8002e84:	2002      	movs	r0, #2
 8002e86:	f7fe fb4f 	bl	8001528 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8002e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e9a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4803      	ldr	r0, [pc, #12]	; (8002eb4 <initCS_Pin+0x38>)
 8002ea6:	f7fd ff45 	bl	8000d34 <GPIO_Init>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40020400 	.word	0x40020400

08002eb8 <initCD_Pin>:

void initCD_Pin(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7fe fb31 	bl	8001528 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8002ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002edc:	463b      	mov	r3, r7
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <initCD_Pin+0x38>)
 8002ee2:	f7fd ff27 	bl	8000d34 <GPIO_Init>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40020000 	.word	0x40020000

08002ef4 <cd_set>:

void cd_set(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_8;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <cd_set+0x14>)
 8002efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efe:	831a      	strh	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40020000 	.word	0x40020000

08002f0c <cd_reset>:

void cd_reset(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_8;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <cd_reset+0x14>)
 8002f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f16:	835a      	strh	r2, [r3, #26]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40020000 	.word	0x40020000

08002f24 <initRES_Pin>:

void initRES_Pin(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f7fe fafb 	bl	8001528 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f32:	2300      	movs	r3, #0
 8002f34:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002f36:	2303      	movs	r3, #3
 8002f38:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8002f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f42:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002f44:	2301      	movs	r3, #1
 8002f46:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f48:	463b      	mov	r3, r7
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <initRES_Pin+0x38>)
 8002f4e:	f7fd fef1 	bl	8000d34 <GPIO_Init>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40020000 	.word	0x40020000

08002f60 <res_set>:

void res_set(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_9;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <res_set+0x14>)
 8002f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6a:	831a      	strh	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40020000 	.word	0x40020000

08002f78 <res_reset>:

void res_reset(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_9;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <res_reset+0x14>)
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	835a      	strh	r2, [r3, #26]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40020000 	.word	0x40020000

08002f90 <Delay>:
				Write_Data(*(n+16*k+i));
				}
}

void Delay(uint16_t n)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
	uint32_t nl = n*2;
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
	while(nl--);
 8002fa0:	bf00      	nop
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	60fa      	str	r2, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1fa      	bne.n	8002fa2 <Delay+0x12>


	return;
 8002fac:	bf00      	nop
}
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop

08002fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fbe:	e003      	b.n	8002fc8 <LoopCopyDataInit>

08002fc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8002fc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fc6:	3104      	adds	r1, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fc8:	480b      	ldr	r0, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8002fcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fd0:	d3f6      	bcc.n	8002fc0 <CopyDataInit>
  ldr r2, =_sbss
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8002fd4:	e002      	b.n	8002fdc <LoopFillZerobss>

08002fd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002fd8:	f842 3b04 	str.w	r3, [r2], #4

08002fdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8002fde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fe0:	d3f9      	bcc.n	8002fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fe2:	f000 f841 	bl	8003068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe6:	f000 f903 	bl	80031f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fea:	f7ff fcd3 	bl	8002994 <main>
  bx lr
 8002fee:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ff0:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8002ff4:	08003894 	.word	0x08003894
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ffc:	20000020 	.word	0x20000020
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003000:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8003004:	20000094 	.word	0x20000094

08003008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC1_IRQHandler>
	...

0800300c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800301c:	e7fe      	b.n	800301c <HardFault_Handler+0x4>
 800301e:	bf00      	nop

08003020 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003024:	e7fe      	b.n	8003024 <MemManage_Handler+0x4>
 8003026:	bf00      	nop

08003028 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800302c:	e7fe      	b.n	800302c <BusFault_Handler+0x4>
 800302e:	bf00      	nop

08003030 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003034:	e7fe      	b.n	8003034 <UsageFault_Handler+0x4>
 8003036:	bf00      	nop

08003038 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <SystemInit+0x5c>)
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <SystemInit+0x5c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003076:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8003078:	4912      	ldr	r1, [pc, #72]	; (80030c4 <SystemInit+0x5c>)
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <SystemInit+0x5c>)
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <SystemInit+0x60>)
 8003080:	4013      	ands	r3, r2
 8003082:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <SystemInit+0x5c>)
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <SystemInit+0x5c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800308e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8003092:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003094:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <SystemInit+0x5c>)
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <SystemInit+0x5c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80030a0:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <SystemInit+0x5c>)
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <SystemInit+0x5c>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80030aa:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SystemInit+0x5c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80030b2:	f000 f80d 	bl	80030d0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SystemInit+0x64>)
 80030b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030bc:	609a      	str	r2, [r3, #8]
#endif
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	88ffc00c 	.word	0x88ffc00c
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030de:	4a41      	ldr	r2, [pc, #260]	; (80031e4 <SetSysClock+0x114>)
 80030e0:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <SetSysClock+0x114>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80030ea:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <SetSysClock+0x114>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3301      	adds	r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <SetSysClock+0x38>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003106:	d1f0      	bne.n	80030ea <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <SetSysClock+0x114>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003114:	2301      	movs	r3, #1
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	e001      	b.n	800311e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d15a      	bne.n	80031da <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8003124:	4a30      	ldr	r2, [pc, #192]	; (80031e8 <SetSysClock+0x118>)
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <SetSysClock+0x118>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8003130:	4a2d      	ldr	r2, [pc, #180]	; (80031e8 <SetSysClock+0x118>)
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <SetSysClock+0x118>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f043 0302 	orr.w	r3, r3, #2
 800313a:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <SetSysClock+0x118>)
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <SetSysClock+0x118>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <SetSysClock+0x114>)
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <SetSysClock+0x114>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <SetSysClock+0x11c>)
 8003156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800315c:	bf00      	nop
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <SetSysClock+0x11c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f9      	bne.n	800315e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800316a:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <SetSysClock+0x114>)
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <SetSysClock+0x114>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003172:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <SetSysClock+0x114>)
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <SetSysClock+0x114>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800317a:	4a1a      	ldr	r2, [pc, #104]	; (80031e4 <SetSysClock+0x114>)
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <SetSysClock+0x114>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <SetSysClock+0x114>)
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <SetSysClock+0x114>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800318c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800318e:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <SetSysClock+0x114>)
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <SetSysClock+0x114>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8003198:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <SetSysClock+0x114>)
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <SetSysClock+0x114>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a4:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80031a6:	bf00      	nop
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <SetSysClock+0x114>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f9      	beq.n	80031a8 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80031b4:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <SetSysClock+0x114>)
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <SetSysClock+0x114>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80031c0:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <SetSysClock+0x114>)
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <SetSysClock+0x114>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f043 0303 	orr.w	r3, r3, #3
 80031ca:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80031cc:	bf00      	nop
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SetSysClock+0x114>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d1f9      	bne.n	80031ce <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40023c00 	.word	0x40023c00
 80031ec:	40007000 	.word	0x40007000

080031f0 <__libc_init_array>:
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <__libc_init_array+0x3c>)
 80031f2:	b570      	push	{r4, r5, r6, lr}
 80031f4:	461e      	mov	r6, r3
 80031f6:	4c0e      	ldr	r4, [pc, #56]	; (8003230 <__libc_init_array+0x40>)
 80031f8:	2500      	movs	r5, #0
 80031fa:	1ae4      	subs	r4, r4, r3
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	42a5      	cmp	r5, r4
 8003200:	d004      	beq.n	800320c <__libc_init_array+0x1c>
 8003202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003206:	4798      	blx	r3
 8003208:	3501      	adds	r5, #1
 800320a:	e7f8      	b.n	80031fe <__libc_init_array+0xe>
 800320c:	f000 f816 	bl	800323c <_init>
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <__libc_init_array+0x44>)
 8003212:	4c09      	ldr	r4, [pc, #36]	; (8003238 <__libc_init_array+0x48>)
 8003214:	461e      	mov	r6, r3
 8003216:	1ae4      	subs	r4, r4, r3
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	2500      	movs	r5, #0
 800321c:	42a5      	cmp	r5, r4
 800321e:	d004      	beq.n	800322a <__libc_init_array+0x3a>
 8003220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003224:	4798      	blx	r3
 8003226:	3501      	adds	r5, #1
 8003228:	e7f8      	b.n	800321c <__libc_init_array+0x2c>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	0800388c 	.word	0x0800388c
 8003230:	0800388c 	.word	0x0800388c
 8003234:	0800388c 	.word	0x0800388c
 8003238:	08003890 	.word	0x08003890

0800323c <_init>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	bf00      	nop
 8003240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003242:	bc08      	pop	{r3}
 8003244:	469e      	mov	lr, r3
 8003246:	4770      	bx	lr

08003248 <_fini>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr
